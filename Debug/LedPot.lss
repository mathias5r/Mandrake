
LedPot.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         00000048  00800100  00001956  000019ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800148  00800148  00001a32  2**0
                  ALLOC
  3 .stab         00006b94  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003a81  00000000  00000000  000085c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c049  2**0
                  CONTENTS, READONLY

Desmontagem da seção .text:

00000000 <__vectors>:
       0:	35 c0       	rjmp	.+106    	; 0x6c <__ctors_end>
       2:	00 00       	nop
       4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
       6:	00 00       	nop
       8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
       a:	00 00       	nop
       c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
       e:	00 00       	nop
      10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
      12:	00 00       	nop
      14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
      16:	00 00       	nop
      18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
      1e:	00 00       	nop
      20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
      22:	00 00       	nop
      24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
      26:	00 00       	nop
      28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
      2e:	00 00       	nop
      30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
      32:	00 00       	nop
      34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
      36:	00 00       	nop
      38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
      3e:	00 00       	nop
      40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
      42:	00 00       	nop
      44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
      46:	00 00       	nop
      48:	8a c4       	rjmp	.+2324   	; 0x95e <__vector_18>
      4a:	00 00       	nop
      4c:	b3 c4       	rjmp	.+2406   	; 0x9b4 <__vector_19>
      4e:	00 00       	nop
      50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__vector_21>
      56:	00 00       	nop
      58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
      5e:	00 00       	nop
      60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
	...

00000068 <__ctors_start>:
      68:	33 07       	cpc	r19, r19
      6a:	8a 08       	sbc	r8, r10

0000006c <__ctors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e6 e5       	ldi	r30, 0x56	; 86
      80:	f9 e1       	ldi	r31, 0x19	; 25
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	a8 34       	cpi	r26, 0x48	; 72
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	11 e0       	ldi	r17, 0x01	; 1
      90:	a8 e4       	ldi	r26, 0x48	; 72
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a4 3f       	cpi	r26, 0xF4	; 244
      9a:	b1 07       	cpc	r27, r17
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	cc e6       	ldi	r28, 0x6C	; 108
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	22 97       	sbiw	r28, 0x02	; 2
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__tablejump__>
      ae:	c8 36       	cpi	r28, 0x68	; 104
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	e4 d6       	rcall	.+3528   	; 0xe7e <main>
      b6:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <_exit>

000000ba <__bad_interrupt>:
      ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <_ZL12__iCliRetValv>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
    cli();
      c4:	f8 94       	cli
    return 1;
      c6:	81 e0       	ldi	r24, 0x01	; 1
}
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	08 95       	ret

000000ce <_ZL11__iSeiParamPKh>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	00 d0       	rcall	.+0      	; 0xd4 <_ZL11__iSeiParamPKh+0x6>
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	9a 83       	std	Y+2, r25	; 0x02
      da:	89 83       	std	Y+1, r24	; 0x01
    sei();
      dc:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
      de:	0f 90       	pop	r0
      e0:	0f 90       	pop	r0
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <_ZN7ADCconv10isr_handleEv>:
	ADCconv(ADC_CHANNEL ch, ADC_PRESCALLER pr, VOLTAGE_REFERENCE vt);
	unsigned int voltage();
	unsigned int get_channel();
	void enable();
	void disable();
	static void isr_handle(){
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	00 d0       	rcall	.+0      	; 0xee <_ZN7ADCconv10isr_handleEv+0x6>
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
		int ch = ADMUX & 0x0f;
      f2:	8c e7       	ldi	r24, 0x7C	; 124
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	fc 01       	movw	r30, r24
      f8:	80 81       	ld	r24, Z
      fa:	88 2f       	mov	r24, r24
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	8f 70       	andi	r24, 0x0F	; 15
     100:	99 27       	eor	r25, r25
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01
		buffers[ch]->update(ADCL | (ADCH << 8));
     106:	88 e7       	ldi	r24, 0x78	; 120
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	fc 01       	movw	r30, r24
     10c:	80 81       	ld	r24, Z
     10e:	28 2f       	mov	r18, r24
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	89 e7       	ldi	r24, 0x79	; 121
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	fc 01       	movw	r30, r24
     118:	80 81       	ld	r24, Z
     11a:	88 2f       	mov	r24, r24
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	98 2f       	mov	r25, r24
     120:	88 27       	eor	r24, r24
     122:	82 2b       	or	r24, r18
     124:	93 2b       	or	r25, r19
     126:	9c 01       	movw	r18, r24
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	9a 81       	ldd	r25, Y+2	; 0x02
     12c:	88 0f       	add	r24, r24
     12e:	99 1f       	adc	r25, r25
     130:	88 5b       	subi	r24, 0xB8	; 184
     132:	9e 4f       	sbci	r25, 0xFE	; 254
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	91 81       	ldd	r25, Z+1	; 0x01
     13a:	b9 01       	movw	r22, r18
     13c:	a4 d1       	rcall	.+840    	; 0x486 <_ZN10CircBufferILj16EE6updateEj>
     13e:	0f 90       	pop	r0
	}
     140:	0f 90       	pop	r0
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <__vector_21>:
#include "ADCconv.h"
#include "Debugger.h"

ADCconv::ADC_Buffer* ADCconv::buffers[];

ISR(ADC_vect){
     148:	1f 92       	push	r1
     14a:	0f 92       	push	r0
     14c:	00 90 5f 00 	lds	r0, 0x005F
     150:	0f 92       	push	r0
     152:	11 24       	eor	r1, r1
     154:	2f 93       	push	r18
     156:	3f 93       	push	r19
     158:	4f 93       	push	r20
     15a:	5f 93       	push	r21
     15c:	6f 93       	push	r22
     15e:	7f 93       	push	r23
     160:	8f 93       	push	r24
     162:	9f 93       	push	r25
     164:	af 93       	push	r26
     166:	bf 93       	push	r27
     168:	ef 93       	push	r30
     16a:	ff 93       	push	r31
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
	ADCconv::isr_handle();
     174:	b9 df       	rcall	.-142    	; 0xe8 <_ZN7ADCconv10isr_handleEv>
     176:	df 91       	pop	r29
}
     178:	cf 91       	pop	r28
     17a:	ff 91       	pop	r31
     17c:	ef 91       	pop	r30
     17e:	bf 91       	pop	r27
     180:	af 91       	pop	r26
     182:	9f 91       	pop	r25
     184:	8f 91       	pop	r24
     186:	7f 91       	pop	r23
     188:	6f 91       	pop	r22
     18a:	5f 91       	pop	r21
     18c:	4f 91       	pop	r20
     18e:	3f 91       	pop	r19
     190:	2f 91       	pop	r18
     192:	0f 90       	pop	r0
     194:	00 92 5f 00 	sts	0x005F, r0
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <_ZN7ADCconvC1ENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE>:

ADCconv::ADCconv(ADC_CHANNEL ch, ADC_PRESCALLER pr, VOLTAGE_REFERENCE vt){
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <_ZN7ADCconvC1ENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE+0x6>
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <_ZN7ADCconvC1ENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE+0x8>
     1a6:	1f 92       	push	r1
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	9a 83       	std	Y+2, r25	; 0x02
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	6b 83       	std	Y+3, r22	; 0x03
     1b2:	4c 83       	std	Y+4, r20	; 0x04
     1b4:	2d 83       	std	Y+5, r18	; 0x05
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	03 96       	adiw	r24, 0x03	; 3
     1bc:	9c d1       	rcall	.+824    	; 0x4f6 <_ZN10CircBufferILj16EEC1Ev>
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	9a 81       	ldd	r25, Y+2	; 0x02
     1c2:	85 96       	adiw	r24, 0x25	; 37
     1c4:	98 d1       	rcall	.+816    	; 0x4f6 <_ZN10CircBufferILj16EEC1Ev>
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	88 2f       	mov	r24, r24

	buffers[ch] = &this->buffer;
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	29 81       	ldd	r18, Y+1	; 0x01
     1ce:	3a 81       	ldd	r19, Y+2	; 0x02
     1d0:	2d 5f       	subi	r18, 0xFD	; 253
     1d2:	3f 4f       	sbci	r19, 0xFF	; 255
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	88 5b       	subi	r24, 0xB8	; 184
     1da:	9e 4f       	sbci	r25, 0xFE	; 254
     1dc:	fc 01       	movw	r30, r24
     1de:	31 83       	std	Z+1, r19	; 0x01
     1e0:	20 83       	st	Z, r18
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	9a 81       	ldd	r25, Y+2	; 0x02
	this->channel = ch;
     1e6:	2b 81       	ldd	r18, Y+3	; 0x03
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	9a 81       	ldd	r25, Y+2	; 0x02
	this->prescaller = pr;
     1f0:	2c 81       	ldd	r18, Y+4	; 0x04
     1f2:	fc 01       	movw	r30, r24
     1f4:	21 83       	std	Z+1, r18	; 0x01
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	9a 81       	ldd	r25, Y+2	; 0x02
	this->volt = vt;
     1fa:	2d 81       	ldd	r18, Y+5	; 0x05
     1fc:	fc 01       	movw	r30, r24
     1fe:	22 83       	std	Z+2, r18	; 0x02
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	9a 81       	ldd	r25, Y+2	; 0x02

	config(this->channel,this->prescaller,this->volt);
     204:	fc 01       	movw	r30, r24
     206:	22 81       	ldd	r18, Z+2	; 0x02
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	41 81       	ldd	r20, Z+1	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	9a 81       	ldd	r25, Y+2	; 0x02
     214:	fc 01       	movw	r30, r24
     216:	30 81       	ld	r19, Z
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	63 2f       	mov	r22, r19
     21e:	8c d0       	rcall	.+280    	; 0x338 <_ZN7ADCconv6configENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE>
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	9a 81       	ldd	r25, Y+2	; 0x02
     224:	d0 d0       	rcall	.+416    	; 0x3c6 <_ZN7ADCconv6enableEv>

	enable();
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	9a 81       	ldd	r25, Y+2	; 0x02
     22a:	4c d0       	rcall	.+152    	; 0x2c4 <_ZN7ADCconv16start_conversionEv>
     22c:	0f 90       	pop	r0

	start_conversion();
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0

}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <_ZN7ADCconv7voltageEv>:

unsigned int ADCconv::voltage(){
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	28 97       	sbiw	r28, 0x08	; 8
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	98 87       	std	Y+8, r25	; 0x08
     252:	8f 83       	std	Y+7, r24	; 0x07


	unsigned int value = read();
     254:	8f 81       	ldd	r24, Y+7	; 0x07
     256:	98 85       	ldd	r25, Y+8	; 0x08
     258:	cb d0       	rcall	.+406    	; 0x3f0 <_ZN7ADCconv4readEv>
     25a:	9a 83       	std	Y+2, r25	; 0x02
     25c:	89 83       	std	Y+1, r24	; 0x01
     25e:	89 81       	ldd	r24, Y+1	; 0x01

	value = (value >> 4);
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	92 95       	swap	r25
     264:	82 95       	swap	r24
     266:	8f 70       	andi	r24, 0x0F	; 15
     268:	89 27       	eor	r24, r25
     26a:	9f 70       	andi	r25, 0x0F	; 15
     26c:	89 27       	eor	r24, r25
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	89 81       	ldd	r24, Y+1	; 0x01

	unsigned long aux = ((unsigned long)value*5000);
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	9c 01       	movw	r18, r24
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	88 e8       	ldi	r24, 0x88	; 136
     27e:	93 e1       	ldi	r25, 0x13	; 19
     280:	dc 01       	movw	r26, r24
     282:	54 d7       	rcall	.+3752   	; 0x112c <__muluhisi3>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	8b 83       	std	Y+3, r24	; 0x03
     28a:	9c 83       	std	Y+4, r25	; 0x04
     28c:	ad 83       	std	Y+5, r26	; 0x05
     28e:	be 83       	std	Y+6, r27	; 0x06
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	9c 81       	ldd	r25, Y+4	; 0x04

	value = aux >> 10;
     294:	ad 81       	ldd	r26, Y+5	; 0x05
     296:	be 81       	ldd	r27, Y+6	; 0x06
     298:	07 2e       	mov	r0, r23
     29a:	7a e0       	ldi	r23, 0x0A	; 10
     29c:	b6 95       	lsr	r27
     29e:	a7 95       	ror	r26
     2a0:	97 95       	ror	r25
     2a2:	87 95       	ror	r24
     2a4:	7a 95       	dec	r23
     2a6:	d1 f7       	brne	.-12     	; 0x29c <_ZN7ADCconv7voltageEv+0x60>
     2a8:	70 2d       	mov	r23, r0
     2aa:	9a 83       	std	Y+2, r25	; 0x02
     2ac:	89 83       	std	Y+1, r24	; 0x01
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02

	return value;
     2b2:	28 96       	adiw	r28, 0x08	; 8
     2b4:	0f b6       	in	r0, 0x3f	; 63

}
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <_ZN7ADCconv16start_conversionEv>:

	return this->channel;

}

void ADCconv::start_conversion(){
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <_ZN7ADCconv16start_conversionEv+0x6>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	9a 83       	std	Y+2, r25	; 0x02
     2d0:	89 83       	std	Y+1, r24	; 0x01

	/*Set a rigth-ajust. A right-justified result means that bits [(N-1):0]
	 * (where N is the number of bits of precision) of the register contain
	 *  the ADC value and the most-significant bits of the register are set
	 *   to zero.*/
	ADMUX &= ~(1 << ADLAR);
     2d2:	8c e7       	ldi	r24, 0x7C	; 124
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	2c e7       	ldi	r18, 0x7C	; 124
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	20 81       	ld	r18, Z
     2de:	2f 7d       	andi	r18, 0xDF	; 223
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18

	/*Enable the auto-triggering*/
	ADCSRA |= (1 << ADATE);
     2e4:	8a e7       	ldi	r24, 0x7A	; 122
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	2a e7       	ldi	r18, 0x7A	; 122
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	f9 01       	movw	r30, r18
     2ee:	20 81       	ld	r18, Z
     2f0:	20 62       	ori	r18, 0x20	; 32
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18

	/*Set trigger mode to free running. This means that as soon as an ADC has
	 *finished, the next will be immediately started.*/
	ADCSRB &= ~((1 << ADTS2) | (1 << ADTS1) | (1 << ADTS0));
     2f6:	8b e7       	ldi	r24, 0x7B	; 123
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	2b e7       	ldi	r18, 0x7B	; 123
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	f9 01       	movw	r30, r18
     300:	20 81       	ld	r18, Z
     302:	28 7f       	andi	r18, 0xF8	; 248
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18

	/*Enable the ADC interrupt. Without this, the internal interrupt will not
	 * trigger.*/
	ADCSRA |= (1 << ADIE);
     308:	8a e7       	ldi	r24, 0x7A	; 122
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	2a e7       	ldi	r18, 0x7A	; 122
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	f9 01       	movw	r30, r18
     312:	20 81       	ld	r18, Z
     314:	28 60       	ori	r18, 0x08	; 8
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18

	/*Enable the global interrupts*/
	sei();
     31a:	78 94       	sei

	/*Start the ADC conversion*/
	ADCSRA |= (1 << ADSC);
     31c:	8a e7       	ldi	r24, 0x7A	; 122
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	2a e7       	ldi	r18, 0x7A	; 122
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	20 64       	ori	r18, 0x40	; 64
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18

}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <_ZN7ADCconv6configENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE>:

void ADCconv::config(ADC_CHANNEL ch, ADC_PRESCALLER pr, VOLTAGE_REFERENCE vt){
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	00 d0       	rcall	.+0      	; 0x33e <_ZN7ADCconv6configENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE+0x6>
     33e:	00 d0       	rcall	.+0      	; 0x340 <_ZN7ADCconv6configENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE+0x8>
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	9a 83       	std	Y+2, r25	; 0x02
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	6b 83       	std	Y+3, r22	; 0x03
     34c:	4c 83       	std	Y+4, r20	; 0x04
     34e:	2d 83       	std	Y+5, r18	; 0x05

	/*Set the voltage reference for the ADC as AVcc with external capacitor
	 * at AREF pin*/
	ADMUX |= (vt << 6);//(1<<REFS0);
     350:	8c e7       	ldi	r24, 0x7C	; 124
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2c e7       	ldi	r18, 0x7C	; 124
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	42 2f       	mov	r20, r18
     35e:	2d 81       	ldd	r18, Y+5	; 0x05
     360:	22 2f       	mov	r18, r18
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	00 24       	eor	r0, r0
     366:	36 95       	lsr	r19
     368:	27 95       	ror	r18
     36a:	07 94       	ror	r0
     36c:	36 95       	lsr	r19
     36e:	27 95       	ror	r18
     370:	07 94       	ror	r0
     372:	32 2f       	mov	r19, r18
     374:	20 2d       	mov	r18, r0
     376:	24 2b       	or	r18, r20
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18

	/*Clear MUX3..0 in preparation for setting the analog input*/
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     37c:	8c e7       	ldi	r24, 0x7C	; 124
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	2c e7       	ldi	r18, 0x7C	; 124
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	20 7f       	andi	r18, 0xF0	; 240
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18

	/*Selection of the channel*/
	ADMUX |= ch;
     38e:	8c e7       	ldi	r24, 0x7C	; 124
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	2c e7       	ldi	r18, 0x7C	; 124
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	30 81       	ld	r19, Z
     39a:	2b 81       	ldd	r18, Y+3	; 0x03
     39c:	23 2b       	or	r18, r19
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18

	/*Set prescaller to 128 (16000KHz/128 = 125KHz)
	 *Above 200KHz 10-bit results are not reliable.*/
	ADCSRA |= pr;//((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
     3a2:	8a e7       	ldi	r24, 0x7A	; 122
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	2a e7       	ldi	r18, 0x7A	; 122
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	f9 01       	movw	r30, r18
     3ac:	30 81       	ld	r19, Z
     3ae:	2c 81       	ldd	r18, Y+4	; 0x04
     3b0:	23 2b       	or	r18, r19
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18

}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_ZN7ADCconv6enableEv>:

void ADCconv::enable(){
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <_ZN7ADCconv6enableEv+0x6>
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	9a 83       	std	Y+2, r25	; 0x02
     3d2:	89 83       	std	Y+1, r24	; 0x01

	/*Enable the ADC*/
	ADCSRA |= (1 << ADEN);
     3d4:	8a e7       	ldi	r24, 0x7A	; 122
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	2a e7       	ldi	r18, 0x7A	; 122
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	20 68       	ori	r18, 0x80	; 128
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
}
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <_ZN7ADCconv4readEv>:
	/*Disable the ADC*/
	ADCSRA &= ~(1 << ADEN);

}

unsigned int ADCconv::read(){
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	28 97       	sbiw	r28, 0x08	; 8
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	98 87       	std	Y+8, r25	; 0x08
     406:	8f 83       	std	Y+7, r24	; 0x07

    unsigned int value = 0;
     408:	1a 82       	std	Y+2, r1	; 0x02
     40a:	19 82       	std	Y+1, r1	; 0x01

	ATOMIC_BLOCK(ATOMIC_FORCEON){
     40c:	1e 82       	std	Y+6, r1	; 0x06
     40e:	56 de       	rcall	.-852    	; 0xbc <_ZL12__iCliRetValv>
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	0e c0       	rjmp	.+28     	; 0x430 <_ZN7ADCconv4readEv+0x40>
     414:	8f 81       	ldd	r24, Y+7	; 0x07
    	this->atomic_buffer = this->buffer;
     416:	98 85       	ldd	r25, Y+8	; 0x08
     418:	2f 81       	ldd	r18, Y+7	; 0x07
     41a:	38 85       	ldd	r19, Y+8	; 0x08
     41c:	42 e2       	ldi	r20, 0x22	; 34
     41e:	f9 01       	movw	r30, r18
     420:	33 96       	adiw	r30, 0x03	; 3
     422:	dc 01       	movw	r26, r24
     424:	95 96       	adiw	r26, 0x25	; 37
     426:	01 90       	ld	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	4a 95       	dec	r20
     42c:	e1 f7       	brne	.-8      	; 0x426 <_ZN7ADCconv4readEv+0x36>
     42e:	1b 82       	std	Y+3, r1	; 0x03

unsigned int ADCconv::read(){

    unsigned int value = 0;

	ATOMIC_BLOCK(ATOMIC_FORCEON){
     430:	8b 81       	ldd	r24, Y+3	; 0x03
     432:	88 23       	and	r24, r24
     434:	79 f7       	brne	.-34     	; 0x414 <_ZN7ADCconv4readEv+0x24>
     436:	ce 01       	movw	r24, r28
    	this->atomic_buffer = this->buffer;
    }
     438:	06 96       	adiw	r24, 0x06	; 6
     43a:	49 de       	rcall	.-878    	; 0xce <_ZL11__iSeiParamPKh>
     43c:	1d 82       	std	Y+5, r1	; 0x05
     43e:	1c 82       	std	Y+4, r1	; 0x04

	for (int i = 0; i < 16; i++){
     440:	12 c0       	rjmp	.+36     	; 0x466 <_ZN7ADCconv4readEv+0x76>
     442:	8f 81       	ldd	r24, Y+7	; 0x07
     444:	98 85       	ldd	r25, Y+8	; 0x08
		value += this->atomic_buffer.get(i);
     446:	85 96       	adiw	r24, 0x25	; 37
     448:	2c 81       	ldd	r18, Y+4	; 0x04
     44a:	3d 81       	ldd	r19, Y+5	; 0x05
     44c:	b9 01       	movw	r22, r18
     44e:	6f d0       	rcall	.+222    	; 0x52e <_ZN10CircBufferILj16EE3getEi>
     450:	29 81       	ldd	r18, Y+1	; 0x01
     452:	3a 81       	ldd	r19, Y+2	; 0x02
     454:	82 0f       	add	r24, r18
     456:	93 1f       	adc	r25, r19
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	8c 81       	ldd	r24, Y+4	; 0x04
     45e:	9d 81       	ldd	r25, Y+5	; 0x05
     460:	01 96       	adiw	r24, 0x01	; 1

	ATOMIC_BLOCK(ATOMIC_FORCEON){
    	this->atomic_buffer = this->buffer;
    }

	for (int i = 0; i < 16; i++){
     462:	9d 83       	std	Y+5, r25	; 0x05
     464:	8c 83       	std	Y+4, r24	; 0x04
     466:	8c 81       	ldd	r24, Y+4	; 0x04
     468:	9d 81       	ldd	r25, Y+5	; 0x05
     46a:	80 31       	cpi	r24, 0x10	; 16
     46c:	91 05       	cpc	r25, r1
     46e:	4c f3       	brlt	.-46     	; 0x442 <_ZN7ADCconv4readEv+0x52>
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	28 96       	adiw	r28, 0x08	; 8
		value += this->atomic_buffer.get(i);
	}

	return value;
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli

}
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN10CircBufferILj16EE6updateEj>:
public:
	CircBuffer() {
		memset(buffer, 0, SIZE*sizeof(unsigned int));
		this->pos = SIZE-1;
	}
	void update(unsigned int value){
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <_ZN10CircBufferILj16EE6updateEj+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN10CircBufferILj16EE6updateEj+0x8>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	7c 83       	std	Y+4, r23	; 0x04
     498:	6b 83       	std	Y+3, r22	; 0x03
		this->pos = ((this->pos == SIZE)? 0 : (this->pos+1));
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	fc 01       	movw	r30, r24
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	80 31       	cpi	r24, 0x10	; 16
     4a6:	91 05       	cpc	r25, r1
     4a8:	39 f0       	breq	.+14     	; 0x4b8 <_ZN10CircBufferILj16EE6updateEj+0x32>
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	fc 01       	movw	r30, r24
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <_ZN10CircBufferILj16EE6updateEj+0x36>
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	29 81       	ldd	r18, Y+1	; 0x01
     4be:	3a 81       	ldd	r19, Y+2	; 0x02
     4c0:	f9 01       	movw	r30, r18
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
		this->buffer[this->pos] = value;
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	29 81       	ldd	r18, Y+1	; 0x01
     4d2:	3a 81       	ldd	r19, Y+2	; 0x02
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	82 0f       	add	r24, r18
     4dc:	93 1f       	adc	r25, r19
     4de:	2b 81       	ldd	r18, Y+3	; 0x03
     4e0:	3c 81       	ldd	r19, Y+4	; 0x04
     4e2:	fc 01       	movw	r30, r24
     4e4:	31 83       	std	Z+1, r19	; 0x01
     4e6:	20 83       	st	Z, r18
	}
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <_ZN10CircBufferILj16EEC1Ev>:
#include <string.h>

template<unsigned int SIZE>
class CircBuffer {
public:
	CircBuffer() {
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <_ZN10CircBufferILj16EEC1Ev+0x6>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	9a 83       	std	Y+2, r25	; 0x02
     502:	89 83       	std	Y+1, r24	; 0x01
		memset(buffer, 0, SIZE*sizeof(unsigned int));
     504:	20 e2       	ldi	r18, 0x20	; 32
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	02 96       	adiw	r24, 0x02	; 2
     50e:	a9 01       	movw	r20, r18
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	58 d7       	rcall	.+3760   	; 0x13c6 <memset>
     516:	89 81       	ldd	r24, Y+1	; 0x01
		this->pos = SIZE-1;
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	2f e0       	ldi	r18, 0x0F	; 15
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	fc 01       	movw	r30, r24
     520:	31 83       	std	Z+1, r19	; 0x01
     522:	20 83       	st	Z, r18
     524:	0f 90       	pop	r0
	}
     526:	0f 90       	pop	r0
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <_ZN10CircBufferILj16EE3getEi>:
	void update(unsigned int value){
		this->pos = ((this->pos == SIZE)? 0 : (this->pos+1));
		this->buffer[this->pos] = value;
	}
	unsigned int get(int pos){
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	00 d0       	rcall	.+0      	; 0x534 <_ZN10CircBufferILj16EE3getEi+0x6>
     534:	00 d0       	rcall	.+0      	; 0x536 <_ZN10CircBufferILj16EE3getEi+0x8>
     536:	00 d0       	rcall	.+0      	; 0x538 <_ZN10CircBufferILj16EE3getEi+0xa>
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	9c 83       	std	Y+4, r25	; 0x04
     53e:	8b 83       	std	Y+3, r24	; 0x03
     540:	7e 83       	std	Y+6, r23	; 0x06
     542:	6d 83       	std	Y+5, r22	; 0x05
		int aux;
		aux = (this->pos - pos) % SIZE;
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	9c 81       	ldd	r25, Y+4	; 0x04
     548:	fc 01       	movw	r30, r24
     54a:	20 81       	ld	r18, Z
     54c:	31 81       	ldd	r19, Z+1	; 0x01
     54e:	8d 81       	ldd	r24, Y+5	; 0x05
     550:	9e 81       	ldd	r25, Y+6	; 0x06
     552:	a9 01       	movw	r20, r18
     554:	48 1b       	sub	r20, r24
     556:	59 0b       	sbc	r21, r25
     558:	ca 01       	movw	r24, r20
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	99 27       	eor	r25, r25
     55e:	9a 83       	std	Y+2, r25	; 0x02
     560:	89 83       	std	Y+1, r24	; 0x01
		return this->buffer[aux];
     562:	2b 81       	ldd	r18, Y+3	; 0x03
     564:	3c 81       	ldd	r19, Y+4	; 0x04
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	9a 81       	ldd	r25, Y+2	; 0x02
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	82 0f       	add	r24, r18
     572:	93 1f       	adc	r25, r19
     574:	fc 01       	movw	r30, r24
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
	}
     57a:	26 96       	adiw	r28, 0x06	; 6
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <_ZN8DebuggerC1Eb>:
 *      Author: mathias
 */

#include "Debugger.h"

Debugger::Debugger(bool state){
     58c:	ef 92       	push	r14
     58e:	0f 93       	push	r16
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	2a 97       	sbiw	r28, 0x0a	; 10
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	99 87       	std	Y+9, r25	; 0x09
     5a6:	88 87       	std	Y+8, r24	; 0x08
     5a8:	6a 87       	std	Y+10, r22	; 0x0a
	UART uart(UART::B9600, UART::BITS8, UART::DISABLE, UART::STOPB1);
     5aa:	e1 2c       	mov	r14, r1
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	23 e0       	ldi	r18, 0x03	; 3
     5b0:	40 e8       	ldi	r20, 0x80	; 128
     5b2:	55 e2       	ldi	r21, 0x25	; 37
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	ce 01       	movw	r24, r28
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	26 d2       	rcall	.+1100   	; 0xa0a <_ZN4UARTC1ENS_8BAUDRATEENS_8DATASIZEENS_6PARITYENS_8STOPBITSE>
     5be:	88 85       	ldd	r24, Y+8	; 0x08
	this->ut = &uart;
     5c0:	99 85       	ldd	r25, Y+9	; 0x09
     5c2:	9e 01       	movw	r18, r28
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	fc 01       	movw	r30, r24
     5ca:	31 83       	std	Z+1, r19	; 0x01
     5cc:	20 83       	st	Z, r18
     5ce:	88 85       	ldd	r24, Y+8	; 0x08
	this->state = state;
     5d0:	99 85       	ldd	r25, Y+9	; 0x09
     5d2:	2a 85       	ldd	r18, Y+10	; 0x0a
     5d4:	fc 01       	movw	r30, r24
     5d6:	22 83       	std	Z+2, r18	; 0x02
     5d8:	2a 96       	adiw	r28, 0x0a	; 10
}
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	0f 91       	pop	r16
     5ea:	ef 90       	pop	r14
     5ec:	08 95       	ret

000005ee <_ZN8Debugger5debugEPc>:

void Debugger::debug(char *msg){
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <_ZN8Debugger5debugEPc+0x6>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <_ZN8Debugger5debugEPc+0x8>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	7c 83       	std	Y+4, r23	; 0x04
     600:	6b 83       	std	Y+3, r22	; 0x03
	if(state){
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	fc 01       	movw	r30, r24
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	88 23       	and	r24, r24
     60c:	49 f0       	breq	.+18     	; 0x620 <_ZN8Debugger5debugEPc+0x32>
		this->ut->print(msg);
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
     616:	91 81       	ldd	r25, Z+1	; 0x01
     618:	2b 81       	ldd	r18, Y+3	; 0x03
     61a:	3c 81       	ldd	r19, Y+4	; 0x04
     61c:	b9 01       	movw	r22, r18
     61e:	d8 d2       	rcall	.+1456   	; 0xbd0 <_ZN4UART5printEPc>
     620:	0f 90       	pop	r0
	}
}
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <_ZN8Debugger5debugEj>:

void Debugger::debug(unsigned int value){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	2e 97       	sbiw	r28, 0x0e	; 14
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	9c 87       	std	Y+12, r25	; 0x0c
     644:	8b 87       	std	Y+11, r24	; 0x0b
     646:	7e 87       	std	Y+14, r23	; 0x0e
     648:	6d 87       	std	Y+13, r22	; 0x0d
	char msg[10];
	sprintf((char*)msg,"%d",value);
     64a:	8e 85       	ldd	r24, Y+14	; 0x0e
     64c:	8f 93       	push	r24
     64e:	8d 85       	ldd	r24, Y+13	; 0x0d
     650:	8f 93       	push	r24
     652:	86 e0       	ldi	r24, 0x06	; 6
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	89 2f       	mov	r24, r25
     658:	8f 93       	push	r24
     65a:	86 e0       	ldi	r24, 0x06	; 6
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	8f 93       	push	r24
     660:	ce 01       	movw	r24, r28
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	89 2f       	mov	r24, r25
     666:	8f 93       	push	r24
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	8f 93       	push	r24
     66e:	b2 d6       	rcall	.+3428   	; 0x13d4 <sprintf>
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	8b 85       	ldd	r24, Y+11	; 0x0b
	debug(msg);
     67e:	9c 85       	ldd	r25, Y+12	; 0x0c
     680:	9e 01       	movw	r18, r28
     682:	2f 5f       	subi	r18, 0xFF	; 255
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	b9 01       	movw	r22, r18
     688:	b2 df       	rcall	.-156    	; 0x5ee <_ZN8Debugger5debugEPc>
     68a:	2e 96       	adiw	r28, 0x0e	; 14
     68c:	0f b6       	in	r0, 0x3f	; 63
}
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <_ZN8GPIO_PinC1EiNS_12PinDirectionE>:
#include <stdio.h>
#include <avr/io.h>

#include "GPIO_Pin.h"

GPIO_Pin::GPIO_Pin(int p, PinDirection io)
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <_ZN8GPIO_PinC1EiNS_12PinDirectionE+0x6>
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <_ZN8GPIO_PinC1EiNS_12PinDirectionE+0x8>
     6a4:	1f 92       	push	r1
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	7c 83       	std	Y+4, r23	; 0x04
     6b0:	6b 83       	std	Y+3, r22	; 0x03
     6b2:	4d 83       	std	Y+5, r20	; 0x05
 : pin(p)
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ba:	3c 81       	ldd	r19, Y+4	; 0x04
     6bc:	fc 01       	movw	r30, r24
     6be:	31 83       	std	Z+1, r19	; 0x01
     6c0:	20 83       	st	Z, r18
{
	if(pin < 8) {
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	fc 01       	movw	r30, r24
     6c8:	80 81       	ld	r24, Z
     6ca:	91 81       	ldd	r25, Z+1	; 0x01
     6cc:	88 30       	cpi	r24, 0x08	; 8
     6ce:	91 05       	cpc	r25, r1
     6d0:	54 f4       	brge	.+20     	; 0x6e6 <_ZN8GPIO_PinC1EiNS_12PinDirectionE+0x4a>
		port = GPIO_PORT::portD;
     6d2:	20 91 04 01 	lds	r18, 0x0104
     6d6:	30 91 05 01 	lds	r19, 0x0105
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	fc 01       	movw	r30, r24
     6e0:	33 83       	std	Z+3, r19	; 0x03
     6e2:	22 83       	std	Z+2, r18	; 0x02
     6e4:	35 c0       	rjmp	.+106    	; 0x750 <_ZN8GPIO_PinC1EiNS_12PinDirectionE+0xb4>
	}
	else if(pin > 13) {
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	fc 01       	movw	r30, r24
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	8e 30       	cpi	r24, 0x0E	; 14
     6f2:	91 05       	cpc	r25, r1
     6f4:	bc f0       	brlt	.+46     	; 0x724 <_ZN8GPIO_PinC1EiNS_12PinDirectionE+0x88>
		port = GPIO_PORT::portC;
     6f6:	20 91 02 01 	lds	r18, 0x0102
     6fa:	30 91 03 01 	lds	r19, 0x0103
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	fc 01       	movw	r30, r24
     704:	33 83       	std	Z+3, r19	; 0x03
     706:	22 83       	std	Z+2, r18	; 0x02
		pin -= 14;
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	9a 81       	ldd	r25, Y+2	; 0x02
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	9c 01       	movw	r18, r24
     714:	2e 50       	subi	r18, 0x0E	; 14
     716:	31 09       	sbc	r19, r1
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	fc 01       	movw	r30, r24
     71e:	31 83       	std	Z+1, r19	; 0x01
     720:	20 83       	st	Z, r18
     722:	16 c0       	rjmp	.+44     	; 0x750 <_ZN8GPIO_PinC1EiNS_12PinDirectionE+0xb4>
	}
	else {
		port = GPIO_PORT::portB;
     724:	20 91 00 01 	lds	r18, 0x0100
     728:	30 91 01 01 	lds	r19, 0x0101
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	fc 01       	movw	r30, r24
     732:	33 83       	std	Z+3, r19	; 0x03
     734:	22 83       	std	Z+2, r18	; 0x02
		pin -= 8;
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
     73e:	91 81       	ldd	r25, Z+1	; 0x01
     740:	9c 01       	movw	r18, r24
     742:	28 50       	subi	r18, 0x08	; 8
     744:	31 09       	sbc	r19, r1
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	fc 01       	movw	r30, r24
     74c:	31 83       	std	Z+1, r19	; 0x01
     74e:	20 83       	st	Z, r18
	}

	port->dir(pin, io);
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	48 2f       	mov	r20, r24
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	9a 81       	ldd	r25, Y+2	; 0x02
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	31 81       	ldd	r19, Z+1	; 0x01
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	fc 01       	movw	r30, r24
     766:	82 81       	ldd	r24, Z+2	; 0x02
     768:	93 81       	ldd	r25, Z+3	; 0x03
     76a:	b9 01       	movw	r22, r18
     76c:	27 d0       	rcall	.+78     	; 0x7bc <_ZN9GPIO_PORT9GPIO_Port3dirEii>
     76e:	0f 90       	pop	r0
}
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <_ZN8GPIO_Pin3setEi>:

void GPIO_Pin::set(int val)
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	00 d0       	rcall	.+0      	; 0x784 <_ZN8GPIO_Pin3setEi+0x6>
     784:	00 d0       	rcall	.+0      	; 0x786 <_ZN8GPIO_Pin3setEi+0x8>
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	9a 83       	std	Y+2, r25	; 0x02
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	7c 83       	std	Y+4, r23	; 0x04
     790:	6b 83       	std	Y+3, r22	; 0x03
  port->set(pin, val);
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	9a 81       	ldd	r25, Y+2	; 0x02
     796:	fc 01       	movw	r30, r24
     798:	20 81       	ld	r18, Z
     79a:	31 81       	ldd	r19, Z+1	; 0x01
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	fc 01       	movw	r30, r24
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	93 81       	ldd	r25, Z+3	; 0x03
     7a6:	4b 81       	ldd	r20, Y+3	; 0x03
     7a8:	5c 81       	ldd	r21, Y+4	; 0x04
     7aa:	b9 01       	movw	r22, r18
     7ac:	49 d0       	rcall	.+146    	; 0x840 <_ZN9GPIO_PORT9GPIO_Port3setEii>
     7ae:	0f 90       	pop	r0
}
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <_ZN9GPIO_PORT9GPIO_Port3dirEii>:

GPIO_Port * portB = reinterpret_cast<GPIO_Port*>(AVR_PORTB);
GPIO_Port * portC = reinterpret_cast<GPIO_Port*>(AVR_PORTC);
GPIO_Port * portD = reinterpret_cast<GPIO_Port*>(AVR_PORTD);

void GPIO_Port::dir(int p, int io) {
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x6>
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x8>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <_ZN9GPIO_PORT9GPIO_Port3dirEii+0xa>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	7c 83       	std	Y+4, r23	; 0x04
     7d0:	6b 83       	std	Y+3, r22	; 0x03
     7d2:	5e 83       	std	Y+6, r21	; 0x06
     7d4:	4d 83       	std	Y+5, r20	; 0x05
    if (io)
     7d6:	8d 81       	ldd	r24, Y+5	; 0x05
     7d8:	9e 81       	ldd	r25, Y+6	; 0x06
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	a1 f0       	breq	.+40     	; 0x806 <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x4a>
        ddr |= (1 << p);
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	fc 01       	movw	r30, r24
     7e4:	81 81       	ldd	r24, Z+1	; 0x01
     7e6:	28 2f       	mov	r18, r24
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0b 80       	ldd	r0, Y+3	; 0x03
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x38>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	0a 94       	dec	r0
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x34>
     7f8:	82 2b       	or	r24, r18
     7fa:	28 2f       	mov	r18, r24
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	fc 01       	movw	r30, r24
     802:	21 83       	std	Z+1, r18	; 0x01
     804:	14 c0       	rjmp	.+40     	; 0x82e <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x72>
    else
        ddr &= ~(1 << p);
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	fc 01       	movw	r30, r24
     80c:	81 81       	ldd	r24, Z+1	; 0x01
     80e:	28 2f       	mov	r18, r24
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0b 80       	ldd	r0, Y+3	; 0x03
     816:	02 c0       	rjmp	.+4      	; 0x81c <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x60>
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	0a 94       	dec	r0
     81e:	e2 f7       	brpl	.-8      	; 0x818 <_ZN9GPIO_PORT9GPIO_Port3dirEii+0x5c>
     820:	80 95       	com	r24
     822:	82 23       	and	r24, r18
     824:	28 2f       	mov	r18, r24
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	fc 01       	movw	r30, r24
     82c:	21 83       	std	Z+1, r18	; 0x01
}
     82e:	26 96       	adiw	r28, 0x06	; 6
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <_ZN9GPIO_PORT9GPIO_Port3setEii>:
void GPIO_Port::set(int p, int val) {
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	00 d0       	rcall	.+0      	; 0x846 <_ZN9GPIO_PORT9GPIO_Port3setEii+0x6>
     846:	00 d0       	rcall	.+0      	; 0x848 <_ZN9GPIO_PORT9GPIO_Port3setEii+0x8>
     848:	00 d0       	rcall	.+0      	; 0x84a <_ZN9GPIO_PORT9GPIO_Port3setEii+0xa>
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	7c 83       	std	Y+4, r23	; 0x04
     854:	6b 83       	std	Y+3, r22	; 0x03
     856:	5e 83       	std	Y+6, r21	; 0x06
     858:	4d 83       	std	Y+5, r20	; 0x05
    if (val)
     85a:	8d 81       	ldd	r24, Y+5	; 0x05
     85c:	9e 81       	ldd	r25, Y+6	; 0x06
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	a1 f0       	breq	.+40     	; 0x88a <_ZN9GPIO_PORT9GPIO_Port3setEii+0x4a>
        port |= (1 << p);
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	fc 01       	movw	r30, r24
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	28 2f       	mov	r18, r24
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0b 80       	ldd	r0, Y+3	; 0x03
     872:	02 c0       	rjmp	.+4      	; 0x878 <_ZN9GPIO_PORT9GPIO_Port3setEii+0x38>
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	0a 94       	dec	r0
     87a:	e2 f7       	brpl	.-8      	; 0x874 <_ZN9GPIO_PORT9GPIO_Port3setEii+0x34>
     87c:	82 2b       	or	r24, r18
     87e:	28 2f       	mov	r18, r24
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	fc 01       	movw	r30, r24
     886:	22 83       	std	Z+2, r18	; 0x02
     888:	14 c0       	rjmp	.+40     	; 0x8b2 <_ZN9GPIO_PORT9GPIO_Port3setEii+0x72>
    else
        port &= ~(1 << p);
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	fc 01       	movw	r30, r24
     890:	82 81       	ldd	r24, Z+2	; 0x02
     892:	28 2f       	mov	r18, r24
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0b 80       	ldd	r0, Y+3	; 0x03
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <_ZN9GPIO_PORT9GPIO_Port3setEii+0x60>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	0a 94       	dec	r0
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <_ZN9GPIO_PORT9GPIO_Port3setEii+0x5c>
     8a4:	80 95       	com	r24
     8a6:	82 23       	and	r24, r18
     8a8:	28 2f       	mov	r18, r24
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	fc 01       	movw	r30, r24
     8b0:	22 83       	std	Z+2, r18	; 0x02
}
     8b2:	26 96       	adiw	r28, 0x06	; 6
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <_ZN4UART13isr_rx_handleEv>:
	char get();
	void print(char *s);
	void println(char *s);
	void enable();
	void disable();
	static void isr_rx_handle(){
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
		rx.push(UDR0);
     8cc:	86 ec       	ldi	r24, 0xC6	; 198
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	fc 01       	movw	r30, r24
     8d2:	80 81       	ld	r24, Z
     8d4:	68 2f       	mov	r22, r24
     8d6:	8a e5       	ldi	r24, 0x5A	; 90
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	cf d1       	rcall	.+926    	; 0xc7a <_ZN5QueueILj32EE4pushEc>
     8dc:	df 91       	pop	r29
	};
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <_ZN4UART13isr_tx_handleEv>:
	static void isr_tx_handle(){
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62

		if(tx.length() > 0){
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	1b d2       	rcall	.+1078   	; 0xd2a <_ZN5QueueILj32EE6lengthEv>
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	18 16       	cp	r1, r24
     8f8:	19 06       	cpc	r1, r25
     8fa:	0c f0       	brlt	.+2      	; 0x8fe <_ZN4UART13isr_tx_handleEv+0x1c>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	22 23       	and	r18, r18
     900:	41 f0       	breq	.+16     	; 0x912 <__stack+0x13>
     902:	06 ec       	ldi	r16, 0xC6	; 198
			UDR0 = tx.pop();
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	80 e8       	ldi	r24, 0x80	; 128
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	20 d2       	rcall	.+1088   	; 0xd4c <_ZN5QueueILj32EE3popEv>
     90c:	f8 01       	movw	r30, r16
     90e:	80 83       	st	Z, r24
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
     912:	05 d0       	rcall	.+10     	; 0x91e <_ZN4UART10disable_txEv>
     914:	df 91       	pop	r29
		}else{
			disable_tx();
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
		}

	}
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <_ZN4UART10disable_txEv>:
	static UART_Queue rx;
	BAUDRATE baud;
	DATASIZE data_size;
	PARITY parity;
	STOPBITS stopbits;
	static void disable_tx(){
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
		UCSR0B &= ~(1<<5);
     926:	81 ec       	ldi	r24, 0xC1	; 193
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	21 ec       	ldi	r18, 0xC1	; 193
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	f9 01       	movw	r30, r18
     930:	20 81       	ld	r18, Z
     932:	2f 7d       	andi	r18, 0xDF	; 223
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
	}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <_ZN4UART9enable_txEv>:
	static void enable_tx(){
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
		UCSR0B |= (1<<5);
     946:	81 ec       	ldi	r24, 0xC1	; 193
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	21 ec       	ldi	r18, 0xC1	; 193
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	f9 01       	movw	r30, r18
     950:	20 81       	ld	r18, Z
     952:	20 62       	ori	r18, 0x20	; 32
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
	}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <__vector_18>:
#include "UART.h"

UART::UART_Queue UART::rx;
UART::UART_Queue UART::tx;

ISR(USART_RX_vect){
     95e:	1f 92       	push	r1
     960:	0f 92       	push	r0
     962:	00 90 5f 00 	lds	r0, 0x005F
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	2f 93       	push	r18
     96c:	3f 93       	push	r19
     96e:	4f 93       	push	r20
     970:	5f 93       	push	r21
     972:	6f 93       	push	r22
     974:	7f 93       	push	r23
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
	UART::isr_rx_handle();
     98a:	9c df       	rcall	.-200    	; 0x8c4 <_ZN4UART13isr_rx_handleEv>
     98c:	df 91       	pop	r29
}
     98e:	cf 91       	pop	r28
     990:	ff 91       	pop	r31
     992:	ef 91       	pop	r30
     994:	bf 91       	pop	r27
     996:	af 91       	pop	r26
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	7f 91       	pop	r23
     99e:	6f 91       	pop	r22
     9a0:	5f 91       	pop	r21
     9a2:	4f 91       	pop	r20
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	00 92 5f 00 	sts	0x005F, r0
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <__vector_19>:

ISR(USART_UDRE_vect){
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	00 90 5f 00 	lds	r0, 0x005F
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	UART::isr_tx_handle();
     9e0:	80 df       	rcall	.-256    	; 0x8e2 <_ZN4UART13isr_tx_handleEv>
     9e2:	df 91       	pop	r29
}
     9e4:	cf 91       	pop	r28
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	00 92 5f 00 	sts	0x005F, r0
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	18 95       	reti

00000a0a <_ZN4UARTC1ENS_8BAUDRATEENS_8DATASIZEENS_6PARITYENS_8STOPBITSE>:

UART::UART(BAUDRATE bd, DATASIZE ds, PARITY pt, STOPBITS sb) {
     a0a:	ef 92       	push	r14
     a0c:	0f 93       	push	r16
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	2f 97       	sbiw	r28, 0x0f	; 15
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	9c 83       	std	Y+4, r25	; 0x04
     a24:	8b 83       	std	Y+3, r24	; 0x03
     a26:	4d 83       	std	Y+5, r20	; 0x05
     a28:	5e 83       	std	Y+6, r21	; 0x06
     a2a:	6f 83       	std	Y+7, r22	; 0x07
     a2c:	78 87       	std	Y+8, r23	; 0x08
     a2e:	29 87       	std	Y+9, r18	; 0x09
     a30:	0a 87       	std	Y+10, r16	; 0x0a
     a32:	eb 86       	std	Y+11, r14	; 0x0b

	this->baud = bd;
     a34:	2b 81       	ldd	r18, Y+3	; 0x03
     a36:	3c 81       	ldd	r19, Y+4	; 0x04
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	9e 81       	ldd	r25, Y+6	; 0x06
     a3c:	af 81       	ldd	r26, Y+7	; 0x07
     a3e:	b8 85       	ldd	r27, Y+8	; 0x08
     a40:	f9 01       	movw	r30, r18
     a42:	80 83       	st	Z, r24
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	a2 83       	std	Z+2, r26	; 0x02
     a48:	b3 83       	std	Z+3, r27	; 0x03
	this->data_size = ds;
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	9c 81       	ldd	r25, Y+4	; 0x04
     a4e:	29 85       	ldd	r18, Y+9	; 0x09
     a50:	fc 01       	movw	r30, r24
     a52:	24 83       	std	Z+4, r18	; 0x04
	this->parity = pt;
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	9c 81       	ldd	r25, Y+4	; 0x04
     a58:	2a 85       	ldd	r18, Y+10	; 0x0a
     a5a:	fc 01       	movw	r30, r24
     a5c:	25 83       	std	Z+5, r18	; 0x05
	this->stopbits = sb;
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	2b 85       	ldd	r18, Y+11	; 0x0b
     a64:	fc 01       	movw	r30, r24
     a66:	26 83       	std	Z+6, r18	; 0x06

	unsigned int baud_rate = ((FOSC)/(this->baud*16UL)-1);
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	a2 81       	ldd	r26, Z+2	; 0x02
     a74:	b3 81       	ldd	r27, Z+3	; 0x03
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	aa 1f       	adc	r26, r26
     a7c:	bb 1f       	adc	r27, r27
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	aa 1f       	adc	r26, r26
     a94:	bb 1f       	adc	r27, r27
     a96:	9c 01       	movw	r18, r24
     a98:	ad 01       	movw	r20, r26
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	94 e2       	ldi	r25, 0x24	; 36
     a9e:	a4 ef       	ldi	r26, 0xF4	; 244
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	bc 01       	movw	r22, r24
     aa4:	cd 01       	movw	r24, r26
     aa6:	4c d3       	rcall	.+1688   	; 0x1140 <__udivmodsi4>
     aa8:	da 01       	movw	r26, r20
     aaa:	c9 01       	movw	r24, r18
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	9a 83       	std	Y+2, r25	; 0x02
     ab0:	89 83       	std	Y+1, r24	; 0x01
     ab2:	85 ec       	ldi	r24, 0xC5	; 197

	//Baud rate
	UBRR0H = (baud_rate >> 8);
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	29 81       	ldd	r18, Y+1	; 0x01
     ab8:	3a 81       	ldd	r19, Y+2	; 0x02
     aba:	23 2f       	mov	r18, r19
     abc:	33 27       	eor	r19, r19
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
     ac2:	84 ec       	ldi	r24, 0xC4	; 196
	UBRR0L = baud_rate;
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
     acc:	8b 81       	ldd	r24, Y+3	; 0x03

	enable();
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	a4 d0       	rcall	.+328    	; 0xc1a <_ZN4UART6enableEv>
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	9c 81       	ldd	r25, Y+4	; 0x04

	//Data size
	if(this->data_size == BITS9){
     ad6:	fc 01       	movw	r30, r24
     ad8:	84 81       	ldd	r24, Z+4	; 0x04
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	e1 f4       	brne	.+56     	; 0xb16 <_ZN4UARTC1ENS_8BAUDRATEENS_8DATASIZEENS_6PARITYENS_8STOPBITSE+0x10c>
     ade:	81 ec       	ldi	r24, 0xC1	; 193
     ae0:	90 e0       	ldi	r25, 0x00	; 0
		UCSR0B |= (1 << 2);
     ae2:	21 ec       	ldi	r18, 0xC1	; 193
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	24 60       	ori	r18, 0x04	; 4
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
     af0:	82 ec       	ldi	r24, 0xC2	; 194
     af2:	90 e0       	ldi	r25, 0x00	; 0
		UCSR0C |= (this->data_size << 1);
     af4:	22 ec       	ldi	r18, 0xC2	; 194
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	f9 01       	movw	r30, r18
     afa:	20 81       	ld	r18, Z
     afc:	42 2f       	mov	r20, r18
     afe:	2b 81       	ldd	r18, Y+3	; 0x03
     b00:	3c 81       	ldd	r19, Y+4	; 0x04
     b02:	f9 01       	movw	r30, r18
     b04:	24 81       	ldd	r18, Z+4	; 0x04
     b06:	22 2f       	mov	r18, r18
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	24 2b       	or	r18, r20
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
     b14:	12 c0       	rjmp	.+36     	; 0xb3a <_ZN4UARTC1ENS_8BAUDRATEENS_8DATASIZEENS_6PARITYENS_8STOPBITSE+0x130>
     b16:	82 ec       	ldi	r24, 0xC2	; 194
     b18:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		UCSR0C |= (this->data_size << 1);
     b1a:	22 ec       	ldi	r18, 0xC2	; 194
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	f9 01       	movw	r30, r18
     b20:	20 81       	ld	r18, Z
     b22:	42 2f       	mov	r20, r18
     b24:	2b 81       	ldd	r18, Y+3	; 0x03
     b26:	3c 81       	ldd	r19, Y+4	; 0x04
     b28:	f9 01       	movw	r30, r18
     b2a:	24 81       	ldd	r18, Z+4	; 0x04
     b2c:	22 2f       	mov	r18, r18
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	24 2b       	or	r18, r20
     b36:	fc 01       	movw	r30, r24
     b38:	20 83       	st	Z, r18
     b3a:	82 ec       	ldi	r24, 0xC2	; 194
     b3c:	90 e0       	ldi	r25, 0x00	; 0
	}

	//Parity
	UCSR0C |= (this->parity << 4);
     b3e:	22 ec       	ldi	r18, 0xC2	; 194
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	f9 01       	movw	r30, r18
     b44:	20 81       	ld	r18, Z
     b46:	42 2f       	mov	r20, r18
     b48:	2b 81       	ldd	r18, Y+3	; 0x03
     b4a:	3c 81       	ldd	r19, Y+4	; 0x04
     b4c:	f9 01       	movw	r30, r18
     b4e:	25 81       	ldd	r18, Z+5	; 0x05
     b50:	22 2f       	mov	r18, r18
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	22 95       	swap	r18
     b56:	32 95       	swap	r19
     b58:	30 7f       	andi	r19, 0xF0	; 240
     b5a:	32 27       	eor	r19, r18
     b5c:	20 7f       	andi	r18, 0xF0	; 240
     b5e:	32 27       	eor	r19, r18
     b60:	24 2b       	or	r18, r20
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18
     b66:	82 ec       	ldi	r24, 0xC2	; 194
     b68:	90 e0       	ldi	r25, 0x00	; 0

	//Stop_bits
	UCSR0C |= (this->stopbits << 3);
     b6a:	22 ec       	ldi	r18, 0xC2	; 194
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	42 2f       	mov	r20, r18
     b74:	2b 81       	ldd	r18, Y+3	; 0x03
     b76:	3c 81       	ldd	r19, Y+4	; 0x04
     b78:	f9 01       	movw	r30, r18
     b7a:	26 81       	ldd	r18, Z+6	; 0x06
     b7c:	22 2f       	mov	r18, r18
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	22 0f       	add	r18, r18
     b86:	33 1f       	adc	r19, r19
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	24 2b       	or	r18, r20
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
     b92:	2f 96       	adiw	r28, 0x0f	; 15
     b94:	0f b6       	in	r0, 0x3f	; 63
}
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	0f 91       	pop	r16
     ba4:	ef 90       	pop	r14
     ba6:	08 95       	ret

00000ba8 <_ZN4UART3putEc>:

void UART::put(char character){
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	00 d0       	rcall	.+0      	; 0xbae <_ZN4UART3putEc+0x6>
     bae:	1f 92       	push	r1
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01
     bb8:	6b 83       	std	Y+3, r22	; 0x03

	//The UDRE Flag indicates if the transmit
	//buffer (UDR) is ready to receive new data.
	//The UDR is ready when all the data is shifted out.

	this->tx.push(character);
     bba:	6b 81       	ldd	r22, Y+3	; 0x03
     bbc:	80 e8       	ldi	r24, 0x80	; 128
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	5c d0       	rcall	.+184    	; 0xc7a <_ZN5QueueILj32EE4pushEc>
     bc2:	bd de       	rcall	.-646    	; 0x93e <_ZN4UART9enable_txEv>
	enable_tx();
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0

}
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <_ZN4UART5printEPc>:
		return this->rx.pop();
	}
	return 0;
}

void UART::print(char * s){
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <_ZN4UART5printEPc+0x6>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <_ZN4UART5printEPc+0x8>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	7c 83       	std	Y+4, r23	; 0x04
     be2:	6b 83       	std	Y+3, r22	; 0x03

	while(*s){
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <_ZN4UART5printEPc+0x30>
		put(*s);
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	fc 01       	movw	r30, r24
     bec:	20 81       	ld	r18, Z
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	62 2f       	mov	r22, r18
     bf4:	d9 df       	rcall	.-78     	; 0xba8 <_ZN4UART3putEc>
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
		s++;
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
	return 0;
}

void UART::print(char * s){

	while(*s){
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	fc 01       	movw	r30, r24
     c06:	80 81       	ld	r24, Z
     c08:	88 23       	and	r24, r24
     c0a:	69 f7       	brne	.-38     	; 0xbe6 <_ZN4UART5printEPc+0x16>
     c0c:	0f 90       	pop	r0
		put(*s);
		s++;
	}
}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <_ZN4UART6enableEv>:
void UART::println(char * s){
	print(s);
	put('\n');
}

void UART::enable(){
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <_ZN4UART6enableEv+0x6>
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01
	UCSR0B |= (1<<4);
     c28:	81 ec       	ldi	r24, 0xC1	; 193
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	21 ec       	ldi	r18, 0xC1	; 193
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	f9 01       	movw	r30, r18
     c32:	20 81       	ld	r18, Z
     c34:	20 61       	ori	r18, 0x10	; 16
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18
	UCSR0B |= (1<<3);
     c3a:	81 ec       	ldi	r24, 0xC1	; 193
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	21 ec       	ldi	r18, 0xC1	; 193
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	28 60       	ori	r18, 0x08	; 8
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
	UCSR0B |= (1<<7);
     c4c:	81 ec       	ldi	r24, 0xC1	; 193
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	21 ec       	ldi	r18, 0xC1	; 193
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	20 68       	ori	r18, 0x80	; 128
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
	UCSR0B |= (1<<5);
     c5e:	81 ec       	ldi	r24, 0xC1	; 193
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	21 ec       	ldi	r18, 0xC1	; 193
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	f9 01       	movw	r30, r18
     c68:	20 81       	ld	r18, Z
     c6a:	20 62       	ori	r18, 0x20	; 32
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <_ZN5QueueILj32EE4pushEc>:
		memset(buffer, 0, SIZE*sizeof(unsigned char));
		this->head = 0;
		this->tail = 0;
		this->size = 0;
	}
	void push(char value){
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <_ZN5QueueILj32EE4pushEc+0x6>
     c80:	1f 92       	push	r1
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	9a 83       	std	Y+2, r25	; 0x02
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	6b 83       	std	Y+3, r22	; 0x03
		if(((tail + 1) == head) || (((tail + 1) == SIZE) && (head == 0)))
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	fc 01       	movw	r30, r24
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	9c 01       	movw	r18, r24
     c98:	2f 5f       	subi	r18, 0xFF	; 255
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	28 17       	cp	r18, r24
     ca8:	39 07       	cpc	r19, r25
     caa:	79 f0       	breq	.+30     	; 0xcca <_ZN5QueueILj32EE4pushEc+0x50>
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	fc 01       	movw	r30, r24
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	8f 31       	cpi	r24, 0x1F	; 31
     cb8:	91 05       	cpc	r25, r1
     cba:	41 f4       	brne	.+16     	; 0xccc <_ZN5QueueILj32EE4pushEc+0x52>
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	fc 01       	movw	r30, r24
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	09 f4       	brne	.+2      	; 0xccc <_ZN5QueueILj32EE4pushEc+0x52>
			return;
     cca:	29 c0       	rjmp	.+82     	; 0xd1e <_ZN5QueueILj32EE4pushEc+0xa4>
		buffer[tail] = value;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	fc 01       	movw	r30, r24
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	29 81       	ldd	r18, Y+1	; 0x01
     cd8:	3a 81       	ldd	r19, Y+2	; 0x02
     cda:	82 0f       	add	r24, r18
     cdc:	93 1f       	adc	r25, r19
     cde:	06 96       	adiw	r24, 0x06	; 6
     ce0:	2b 81       	ldd	r18, Y+3	; 0x03
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
		tail = (tail+1) % SIZE;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	fc 01       	movw	r30, r24
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	9c 01       	movw	r18, r24
     cf4:	2f 71       	andi	r18, 0x1F	; 31
     cf6:	33 27       	eor	r19, r19
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	fc 01       	movw	r30, r24
     cfe:	33 83       	std	Z+3, r19	; 0x03
     d00:	22 83       	std	Z+2, r18	; 0x02
		size++;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	fc 01       	movw	r30, r24
     d08:	84 81       	ldd	r24, Z+4	; 0x04
     d0a:	95 81       	ldd	r25, Z+5	; 0x05
     d0c:	9c 01       	movw	r18, r24
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	35 83       	std	Z+5, r19	; 0x05
     d1a:	24 83       	std	Z+4, r18	; 0x04
		return;
     d1c:	00 00       	nop
	}
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <_ZN5QueueILj32EE6lengthEv>:
		value = buffer[head];
		head = (head+1) % SIZE;
		size--;
		return value;
	}
	int length(){
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <_ZN5QueueILj32EE6lengthEv+0x6>
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	9a 83       	std	Y+2, r25	; 0x02
     d36:	89 83       	std	Y+1, r24	; 0x01
		return size;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	fc 01       	movw	r30, r24
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	95 81       	ldd	r25, Z+5	; 0x05
	}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <_ZN5QueueILj32EE3popEv>:
		buffer[tail] = value;
		tail = (tail+1) % SIZE;
		size++;
		return;
	}
	char pop(){
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	00 d0       	rcall	.+0      	; 0xd52 <_ZN5QueueILj32EE3popEv+0x6>
     d52:	1f 92       	push	r1
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9b 83       	std	Y+3, r25	; 0x03
     d5a:	8a 83       	std	Y+2, r24	; 0x02
		char value = 0;
     d5c:	19 82       	std	Y+1, r1	; 0x01
		if(tail == head)
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	fc 01       	movw	r30, r24
     d64:	22 81       	ldd	r18, Z+2	; 0x02
     d66:	33 81       	ldd	r19, Z+3	; 0x03
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	9b 81       	ldd	r25, Y+3	; 0x03
     d6c:	fc 01       	movw	r30, r24
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	28 17       	cp	r18, r24
     d74:	39 07       	cpc	r19, r25
     d76:	11 f4       	brne	.+4      	; 0xd7c <_ZN5QueueILj32EE3popEv+0x30>
			return value;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	29 c0       	rjmp	.+82     	; 0xdce <_ZN5QueueILj32EE3popEv+0x82>
		value = buffer[head];
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	9b 81       	ldd	r25, Y+3	; 0x03
     d80:	fc 01       	movw	r30, r24
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	2a 81       	ldd	r18, Y+2	; 0x02
     d88:	3b 81       	ldd	r19, Y+3	; 0x03
     d8a:	82 0f       	add	r24, r18
     d8c:	93 1f       	adc	r25, r19
     d8e:	06 96       	adiw	r24, 0x06	; 6
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	89 83       	std	Y+1, r24	; 0x01
		head = (head+1) % SIZE;
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	fc 01       	movw	r30, r24
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9c 01       	movw	r18, r24
     da4:	2f 71       	andi	r18, 0x1F	; 31
     da6:	33 27       	eor	r19, r19
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	fc 01       	movw	r30, r24
     dae:	31 83       	std	Z+1, r19	; 0x01
     db0:	20 83       	st	Z, r18
		size--;
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	fc 01       	movw	r30, r24
     db8:	84 81       	ldd	r24, Z+4	; 0x04
     dba:	95 81       	ldd	r25, Z+5	; 0x05
     dbc:	9c 01       	movw	r18, r24
     dbe:	21 50       	subi	r18, 0x01	; 1
     dc0:	31 09       	sbc	r19, r1
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	9b 81       	ldd	r25, Y+3	; 0x03
     dc6:	fc 01       	movw	r30, r24
     dc8:	35 83       	std	Z+5, r19	; 0x05
     dca:	24 83       	std	Z+4, r18	; 0x04
		return value;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
	}
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <_ZN5QueueILj32EEC1Ev>:
#include <string.h>

template<unsigned int SIZE>
class Queue {
public:
	Queue(){
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <_ZN5QueueILj32EEC1Ev+0x6>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
		memset(buffer, 0, SIZE*sizeof(unsigned char));
     de8:	20 e2       	ldi	r18, 0x20	; 32
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	06 96       	adiw	r24, 0x06	; 6
     df2:	a9 01       	movw	r20, r18
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	e6 d2       	rcall	.+1484   	; 0x13c6 <memset>
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
		this->head = 0;
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	fc 01       	movw	r30, r24
     e00:	11 82       	std	Z+1, r1	; 0x01
     e02:	10 82       	st	Z, r1
     e04:	89 81       	ldd	r24, Y+1	; 0x01
		this->tail = 0;
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	fc 01       	movw	r30, r24
     e0a:	13 82       	std	Z+3, r1	; 0x03
     e0c:	12 82       	std	Z+2, r1	; 0x02
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
		this->size = 0;
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	fc 01       	movw	r30, r24
     e14:	15 82       	std	Z+5, r1	; 0x05
     e16:	14 82       	std	Z+4, r1	; 0x04
     e18:	0f 90       	pop	r0
	}
     e1a:	0f 90       	pop	r0
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <_Z41__static_initialization_and_destruction_0ii>:
void UART::disable(){
	UCSR0B &= ~(1<<4);
	UCSR0B &= ~(1<<3);
	UCSR0B &= ~(1<<7);
	UCSR0B &= ~(1<<5);
}
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	00 d0       	rcall	.+0      	; 0xe28 <_Z41__static_initialization_and_destruction_0ii+0x6>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <_Z41__static_initialization_and_destruction_0ii+0x8>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	7c 83       	std	Y+4, r23	; 0x04
     e34:	6b 83       	std	Y+3, r22	; 0x03
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	91 05       	cpc	r25, r1
     e3e:	61 f4       	brne	.+24     	; 0xe58 <_Z41__static_initialization_and_destruction_0ii+0x36>
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	8f 3f       	cpi	r24, 0xFF	; 255
     e46:	2f ef       	ldi	r18, 0xFF	; 255
     e48:	92 07       	cpc	r25, r18
     e4a:	31 f4       	brne	.+12     	; 0xe58 <_Z41__static_initialization_and_destruction_0ii+0x36>
 *      Author: mathias
 */

#include "UART.h"

UART::UART_Queue UART::rx;
     e4c:	8a e5       	ldi	r24, 0x5A	; 90
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	c4 df       	rcall	.-120    	; 0xdda <_ZN5QueueILj32EEC1Ev>
     e52:	80 e8       	ldi	r24, 0x80	; 128
UART::UART_Queue UART::tx;
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	c1 df       	rcall	.-126    	; 0xdda <_ZN5QueueILj32EEC1Ev>
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
void UART::disable(){
	UCSR0B &= ~(1<<4);
	UCSR0B &= ~(1<<3);
	UCSR0B &= ~(1<<7);
	UCSR0B &= ~(1<<5);
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <_GLOBAL__sub_I__ZN4UART2rxE>:
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f ef       	ldi	r23, 0xFF	; 255
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	d5 df       	rcall	.-86     	; 0xe22 <_Z41__static_initialization_and_destruction_0ii>
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <main>:

GPIO_Pin led(13,GPIO_Pin::OUTPUT);
Debugger d(true);
ADCconv adc(ADCconv::CH0, ADCconv::FACTOR128, ADCconv::AVCC);

int main(){
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	6e 97       	sbiw	r28, 0x1e	; 30
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
	d.debug("reset\n");
     e92:	6d e0       	ldi	r22, 0x0D	; 13
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	8a ea       	ldi	r24, 0xAA	; 170
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	a9 db       	rcall	.-2222   	; 0x5ee <_ZN8Debugger5debugEPc>
     e9c:	8d ea       	ldi	r24, 0xAD	; 173

	while(1){

		unsigned int pot_value =  adc.voltage();
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	cd d9       	rcall	.-3174   	; 0x23c <_ZN7ADCconv7voltageEv>
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
//			_delay_ms(100);
//			pot_value = adc.voltage();
//			_delay_ms(100);
//		}

		if(pot_value >= 3000){
     eaa:	88 3b       	cpi	r24, 0xB8	; 184
     eac:	2b e0       	ldi	r18, 0x0B	; 11
     eae:	92 07       	cpc	r25, r18
     eb0:	08 f4       	brcc	.+2      	; 0xeb4 <main+0x36>
     eb2:	82 c0       	rjmp	.+260    	; 0xfb8 <main+0x13a>
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	70 e0       	ldi	r23, 0x00	; 0
			led.set(1);
     eb8:	86 ea       	ldi	r24, 0xA6	; 166
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	60 dc       	rcall	.-1856   	; 0x77e <_ZN8GPIO_Pin3setEi>
     ebe:	64 e1       	ldi	r22, 0x14	; 20
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	8a ea       	ldi	r24, 0xAA	; 170
			d.debug("Voltage:");
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	93 db       	rcall	.-2266   	; 0x5ee <_ZN8Debugger5debugEPc>
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	bc 01       	movw	r22, r24
     ece:	8a ea       	ldi	r24, 0xAA	; 170
			d.debug(pot_value);
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	ad db       	rcall	.-2214   	; 0x62e <_ZN8Debugger5debugEj>
     ed4:	6d e1       	ldi	r22, 0x1D	; 29
     ed6:	71 e0       	ldi	r23, 0x01	; 1
     ed8:	8a ea       	ldi	r24, 0xAA	; 170
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	88 db       	rcall	.-2288   	; 0x5ee <_ZN8Debugger5debugEPc>
			d.debug(" mV - Led On! \n");
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	aa e7       	ldi	r26, 0x7A	; 122
     ee4:	b4 e4       	ldi	r27, 0x44	; 68
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	ad 83       	std	Y+5, r26	; 0x05
     eec:	be 83       	std	Y+6, r27	; 0x06
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	4a e7       	ldi	r20, 0x7A	; 122
     ef4:	55 e4       	ldi	r21, 0x45	; 69
     ef6:	6b 81       	ldd	r22, Y+3	; 0x03
     ef8:	7c 81       	ldd	r23, Y+4	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	d8 d1       	rcall	.+944    	; 0x12b0 <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	8f 83       	std	Y+7, r24	; 0x07
     f06:	98 87       	std	Y+8, r25	; 0x08
     f08:	a9 87       	std	Y+9, r26	; 0x09
     f0a:	ba 87       	std	Y+10, r27	; 0x0a
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
	if (__tmp < 1.0)
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	48 d1       	rcall	.+656    	; 0x11ae <__cmpsf2>
     f1e:	88 23       	and	r24, r24
     f20:	2c f4       	brge	.+10     	; 0xf2c <main+0xae>
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9c 87       	std	Y+12, r25	; 0x0c
     f28:	8b 87       	std	Y+11, r24	; 0x0b
     f2a:	3b c0       	rjmp	.+118    	; 0xfa2 <main+0x124>
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
		__ticks = 1;
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
	else if (__tmp > 65535)
     f3c:	b5 d1       	rcall	.+874    	; 0x12a8 <__gesf2>
     f3e:	18 16       	cp	r1, r24
     f40:	3c f5       	brge	.+78     	; 0xf90 <main+0x112>
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e2       	ldi	r20, 0x20	; 32
     f48:	51 e4       	ldi	r21, 0x41	; 65
     f4a:	6b 81       	ldd	r22, Y+3	; 0x03
     f4c:	7c 81       	ldd	r23, Y+4	; 0x04
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	ae d1       	rcall	.+860    	; 0x12b0 <__mulsf3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	2c d1       	rcall	.+600    	; 0x11b6 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9c 87       	std	Y+12, r25	; 0x0c
     f64:	8b 87       	std	Y+11, r24	; 0x0b
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <main+0x108>
     f68:	80 e9       	ldi	r24, 0x90	; 144
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	9e 87       	std	Y+14, r25	; 0x0e
     f6e:	8d 87       	std	Y+13, r24	; 0x0d
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <main+0xf6>
     f78:	9e 87       	std	Y+14, r25	; 0x0e
     f7a:	8d 87       	std	Y+13, r24	; 0x0d
     f7c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	9c 87       	std	Y+12, r25	; 0x0c
     f84:	8b 87       	std	Y+11, r24	; 0x0b
     f86:	8b 85       	ldd	r24, Y+11	; 0x0b
     f88:	9c 85       	ldd	r25, Y+12	; 0x0c
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	69 f7       	brne	.-38     	; 0xf68 <main+0xea>
     f8e:	86 cf       	rjmp	.-244    	; 0xe9c <main+0x1e>
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	0e d1       	rcall	.+540    	; 0x11b6 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9c 87       	std	Y+12, r25	; 0x0c
     fa0:	8b 87       	std	Y+11, r24	; 0x0b
     fa2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa4:	9c 85       	ldd	r25, Y+12	; 0x0c
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa6:	98 8b       	std	Y+16, r25	; 0x10
     fa8:	8f 87       	std	Y+15, r24	; 0x0f
     faa:	8f 85       	ldd	r24, Y+15	; 0x0f
     fac:	98 89       	ldd	r25, Y+16	; 0x10
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <main+0x130>
     fb2:	98 8b       	std	Y+16, r25	; 0x10
     fb4:	8f 87       	std	Y+15, r24	; 0x0f
     fb6:	72 cf       	rjmp	.-284    	; 0xe9c <main+0x1e>
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	86 ea       	ldi	r24, 0xA6	; 166
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	de db       	rcall	.-2116   	; 0x77e <_ZN8GPIO_Pin3setEi>
     fc2:	6d e2       	ldi	r22, 0x2D	; 45
     fc4:	71 e0       	ldi	r23, 0x01	; 1
     fc6:	8a ea       	ldi	r24, 0xAA	; 170
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	11 db       	rcall	.-2526   	; 0x5ee <_ZN8Debugger5debugEPc>
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
			d.debug(" mV - Led Off! \n");
			_delay_ms(1000);
		}
	}

	return 0;
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
			d.debug("Voltage:");
			d.debug(pot_value);
			d.debug(" mV - Led On! \n");
			_delay_ms(1000);
		}else{
			led.set(0);
     fd0:	bc 01       	movw	r22, r24
     fd2:	8a ea       	ldi	r24, 0xAA	; 170
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	2b db       	rcall	.-2474   	; 0x62e <_ZN8Debugger5debugEj>
     fd8:	67 e3       	ldi	r22, 0x37	; 55
     fda:	71 e0       	ldi	r23, 0x01	; 1
			d.debug("Voltage: ");
     fdc:	8a ea       	ldi	r24, 0xAA	; 170
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	06 db       	rcall	.-2548   	; 0x5ee <_ZN8Debugger5debugEPc>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	aa e7       	ldi	r26, 0x7A	; 122
			d.debug(pot_value);
     fe8:	b4 e4       	ldi	r27, 0x44	; 68
     fea:	89 8b       	std	Y+17, r24	; 0x11
     fec:	9a 8b       	std	Y+18, r25	; 0x12
     fee:	ab 8b       	std	Y+19, r26	; 0x13
     ff0:	bc 8b       	std	Y+20, r27	; 0x14
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	55 e4       	ldi	r21, 0x45	; 69
     ffa:	69 89       	ldd	r22, Y+17	; 0x11
     ffc:	7a 89       	ldd	r23, Y+18	; 0x12
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	56 d1       	rcall	.+684    	; 0x12b0 <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8d 8b       	std	Y+21, r24	; 0x15
    100a:	9e 8b       	std	Y+22, r25	; 0x16
    100c:	af 8b       	std	Y+23, r26	; 0x17
    100e:	b8 8f       	std	Y+24, r27	; 0x18
    1010:	20 e0       	ldi	r18, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	6d 89       	ldd	r22, Y+21	; 0x15
    101a:	7e 89       	ldd	r23, Y+22	; 0x16
    101c:	8f 89       	ldd	r24, Y+23	; 0x17
    101e:	98 8d       	ldd	r25, Y+24	; 0x18
    1020:	c6 d0       	rcall	.+396    	; 0x11ae <__cmpsf2>
    1022:	88 23       	and	r24, r24
    1024:	2c f4       	brge	.+10     	; 0x1030 <main+0x1b2>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9a 8f       	std	Y+26, r25	; 0x1a
    102c:	89 8f       	std	Y+25, r24	; 0x19
    102e:	3b c0       	rjmp	.+118    	; 0x10a6 <main+0x228>
    1030:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	6d 89       	ldd	r22, Y+21	; 0x15
    103a:	7e 89       	ldd	r23, Y+22	; 0x16
    103c:	8f 89       	ldd	r24, Y+23	; 0x17
    103e:	98 8d       	ldd	r25, Y+24	; 0x18
    1040:	33 d1       	rcall	.+614    	; 0x12a8 <__gesf2>
    1042:	18 16       	cp	r1, r24
    1044:	3c f5       	brge	.+78     	; 0x1094 <main+0x216>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
		__ticks = 1;
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	69 89       	ldd	r22, Y+17	; 0x11
    1050:	7a 89       	ldd	r23, Y+18	; 0x12
    1052:	8b 89       	ldd	r24, Y+19	; 0x13
	else if (__tmp > 65535)
    1054:	9c 89       	ldd	r25, Y+20	; 0x14
    1056:	2c d1       	rcall	.+600    	; 0x12b0 <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	aa d0       	rcall	.+340    	; 0x11b6 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9a 8f       	std	Y+26, r25	; 0x1a
    1068:	89 8f       	std	Y+25, r24	; 0x19
    106a:	0f c0       	rjmp	.+30     	; 0x108a <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	80 e9       	ldi	r24, 0x90	; 144
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	9c 8f       	std	Y+28, r25	; 0x1c
    1072:	8b 8f       	std	Y+27, r24	; 0x1b
    1074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <main+0x1fa>
    107c:	9c 8f       	std	Y+28, r25	; 0x1c
    107e:	8b 8f       	std	Y+27, r24	; 0x1b
    1080:	89 8d       	ldd	r24, Y+25	; 0x19
    1082:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	9a 8f       	std	Y+26, r25	; 0x1a
    1088:	89 8f       	std	Y+25, r24	; 0x19
    108a:	89 8d       	ldd	r24, Y+25	; 0x19
    108c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	69 f7       	brne	.-38     	; 0x106c <main+0x1ee>
    1092:	04 cf       	rjmp	.-504    	; 0xe9c <main+0x1e>
    1094:	6d 89       	ldd	r22, Y+21	; 0x15
    1096:	7e 89       	ldd	r23, Y+22	; 0x16
    1098:	8f 89       	ldd	r24, Y+23	; 0x17
    109a:	98 8d       	ldd	r25, Y+24	; 0x18
    109c:	8c d0       	rcall	.+280    	; 0x11b6 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9a 8f       	std	Y+26, r25	; 0x1a
    10a4:	89 8f       	std	Y+25, r24	; 0x19
    10a6:	89 8d       	ldd	r24, Y+25	; 0x19
    10a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10aa:	9e 8f       	std	Y+30, r25	; 0x1e
    10ac:	8d 8f       	std	Y+29, r24	; 0x1d
    10ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <main+0x234>
    10b6:	9e 8f       	std	Y+30, r25	; 0x1e
    10b8:	8d 8f       	std	Y+29, r24	; 0x1d
    10ba:	f0 ce       	rjmp	.-544    	; 0xe9c <main+0x1e>

000010bc <_Z41__static_initialization_and_destruction_0ii>:
			_delay_ms(1000);
		}
	}

	return 0;
}
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <_Z41__static_initialization_and_destruction_0ii+0x8>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	7c 83       	std	Y+4, r23	; 0x04
    10ce:	6b 83       	std	Y+3, r22	; 0x03
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	b1 f4       	brne	.+44     	; 0x1106 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	8f 3f       	cpi	r24, 0xFF	; 255
    10e0:	2f ef       	ldi	r18, 0xFF	; 255
    10e2:	92 07       	cpc	r25, r18
    10e4:	81 f4       	brne	.+32     	; 0x1106 <_Z41__static_initialization_and_destruction_0ii+0x4a>
#include "Debugger.h"
#include "ADCconv.h"
#include <util/delay.h>
#include <stdlib.h>

GPIO_Pin led(13,GPIO_Pin::OUTPUT);
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	6d e0       	ldi	r22, 0x0D	; 13
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	86 ea       	ldi	r24, 0xA6	; 166
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	d5 da       	rcall	.-2646   	; 0x69c <_ZN8GPIO_PinC1EiNS_12PinDirectionE>
    10f2:	61 e0       	ldi	r22, 0x01	; 1
Debugger d(true);
    10f4:	8a ea       	ldi	r24, 0xAA	; 170
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	49 da       	rcall	.-2926   	; 0x58c <_ZN8DebuggerC1Eb>
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	47 e0       	ldi	r20, 0x07	; 7
ADCconv adc(ADCconv::CH0, ADCconv::FACTOR128, ADCconv::AVCC);
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	8d ea       	ldi	r24, 0xAD	; 173
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	4c d8       	rcall	.-3944   	; 0x19e <_ZN7ADCconvC1ENS_11ADC_CHANNELENS_14ADC_PRESCALLERENS_17VOLTAGE_REFERENCEE>
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
			_delay_ms(1000);
		}
	}

	return 0;
}
    110c:	0f 90       	pop	r0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <_GLOBAL__sub_I_led>:
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	6f ef       	ldi	r22, 0xFF	; 255
    111e:	7f ef       	ldi	r23, 0xFF	; 255
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	cb df       	rcall	.-106    	; 0x10bc <_Z41__static_initialization_and_destruction_0ii>
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <__muluhisi3>:
    112c:	2b d0       	rcall	.+86     	; 0x1184 <__umulhisi3>
    112e:	a5 9f       	mul	r26, r21
    1130:	90 0d       	add	r25, r0
    1132:	b4 9f       	mul	r27, r20
    1134:	90 0d       	add	r25, r0
    1136:	a4 9f       	mul	r26, r20
    1138:	80 0d       	add	r24, r0
    113a:	91 1d       	adc	r25, r1
    113c:	11 24       	eor	r1, r1
    113e:	08 95       	ret

00001140 <__udivmodsi4>:
    1140:	a1 e2       	ldi	r26, 0x21	; 33
    1142:	1a 2e       	mov	r1, r26
    1144:	aa 1b       	sub	r26, r26
    1146:	bb 1b       	sub	r27, r27
    1148:	fd 01       	movw	r30, r26
    114a:	0d c0       	rjmp	.+26     	; 0x1166 <__udivmodsi4_ep>

0000114c <__udivmodsi4_loop>:
    114c:	aa 1f       	adc	r26, r26
    114e:	bb 1f       	adc	r27, r27
    1150:	ee 1f       	adc	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	a2 17       	cp	r26, r18
    1156:	b3 07       	cpc	r27, r19
    1158:	e4 07       	cpc	r30, r20
    115a:	f5 07       	cpc	r31, r21
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__udivmodsi4_ep>
    115e:	a2 1b       	sub	r26, r18
    1160:	b3 0b       	sbc	r27, r19
    1162:	e4 0b       	sbc	r30, r20
    1164:	f5 0b       	sbc	r31, r21

00001166 <__udivmodsi4_ep>:
    1166:	66 1f       	adc	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	1a 94       	dec	r1
    1170:	69 f7       	brne	.-38     	; 0x114c <__udivmodsi4_loop>
    1172:	60 95       	com	r22
    1174:	70 95       	com	r23
    1176:	80 95       	com	r24
    1178:	90 95       	com	r25
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	bd 01       	movw	r22, r26
    1180:	cf 01       	movw	r24, r30
    1182:	08 95       	ret

00001184 <__umulhisi3>:
    1184:	a2 9f       	mul	r26, r18
    1186:	b0 01       	movw	r22, r0
    1188:	b3 9f       	mul	r27, r19
    118a:	c0 01       	movw	r24, r0
    118c:	a3 9f       	mul	r26, r19
    118e:	70 0d       	add	r23, r0
    1190:	81 1d       	adc	r24, r1
    1192:	11 24       	eor	r1, r1
    1194:	91 1d       	adc	r25, r1
    1196:	b2 9f       	mul	r27, r18
    1198:	70 0d       	add	r23, r0
    119a:	81 1d       	adc	r24, r1
    119c:	11 24       	eor	r1, r1
    119e:	91 1d       	adc	r25, r1
    11a0:	08 95       	ret

000011a2 <__tablejump2__>:
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31

000011a6 <__tablejump__>:
    11a6:	05 90       	lpm	r0, Z+
    11a8:	f4 91       	lpm	r31, Z
    11aa:	e0 2d       	mov	r30, r0
    11ac:	09 94       	ijmp

000011ae <__cmpsf2>:
    11ae:	2f d0       	rcall	.+94     	; 0x120e <__fp_cmp>
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <__cmpsf2+0x6>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	08 95       	ret

000011b6 <__fixunssfsi>:
    11b6:	57 d0       	rcall	.+174    	; 0x1266 <__fp_splitA>
    11b8:	88 f0       	brcs	.+34     	; 0x11dc <__fixunssfsi+0x26>
    11ba:	9f 57       	subi	r25, 0x7F	; 127
    11bc:	90 f0       	brcs	.+36     	; 0x11e2 <__fixunssfsi+0x2c>
    11be:	b9 2f       	mov	r27, r25
    11c0:	99 27       	eor	r25, r25
    11c2:	b7 51       	subi	r27, 0x17	; 23
    11c4:	a0 f0       	brcs	.+40     	; 0x11ee <__fixunssfsi+0x38>
    11c6:	d1 f0       	breq	.+52     	; 0x11fc <__fixunssfsi+0x46>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	1a f0       	brmi	.+6      	; 0x11d8 <__fixunssfsi+0x22>
    11d2:	ba 95       	dec	r27
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__fixunssfsi+0x12>
    11d6:	12 c0       	rjmp	.+36     	; 0x11fc <__fixunssfsi+0x46>
    11d8:	b1 30       	cpi	r27, 0x01	; 1
    11da:	81 f0       	breq	.+32     	; 0x11fc <__fixunssfsi+0x46>
    11dc:	5e d0       	rcall	.+188    	; 0x129a <__fp_zero>
    11de:	b1 e0       	ldi	r27, 0x01	; 1
    11e0:	08 95       	ret
    11e2:	5b c0       	rjmp	.+182    	; 0x129a <__fp_zero>
    11e4:	67 2f       	mov	r22, r23
    11e6:	78 2f       	mov	r23, r24
    11e8:	88 27       	eor	r24, r24
    11ea:	b8 5f       	subi	r27, 0xF8	; 248
    11ec:	39 f0       	breq	.+14     	; 0x11fc <__fixunssfsi+0x46>
    11ee:	b9 3f       	cpi	r27, 0xF9	; 249
    11f0:	cc f3       	brlt	.-14     	; 0x11e4 <__fixunssfsi+0x2e>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b3 95       	inc	r27
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <__fixunssfsi+0x3c>
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__fixunssfsi+0x56>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	08 95       	ret

0000120e <__fp_cmp>:
    120e:	99 0f       	add	r25, r25
    1210:	00 08       	sbc	r0, r0
    1212:	55 0f       	add	r21, r21
    1214:	aa 0b       	sbc	r26, r26
    1216:	e0 e8       	ldi	r30, 0x80	; 128
    1218:	fe ef       	ldi	r31, 0xFE	; 254
    121a:	16 16       	cp	r1, r22
    121c:	17 06       	cpc	r1, r23
    121e:	e8 07       	cpc	r30, r24
    1220:	f9 07       	cpc	r31, r25
    1222:	c0 f0       	brcs	.+48     	; 0x1254 <__fp_cmp+0x46>
    1224:	12 16       	cp	r1, r18
    1226:	13 06       	cpc	r1, r19
    1228:	e4 07       	cpc	r30, r20
    122a:	f5 07       	cpc	r31, r21
    122c:	98 f0       	brcs	.+38     	; 0x1254 <__fp_cmp+0x46>
    122e:	62 1b       	sub	r22, r18
    1230:	73 0b       	sbc	r23, r19
    1232:	84 0b       	sbc	r24, r20
    1234:	95 0b       	sbc	r25, r21
    1236:	39 f4       	brne	.+14     	; 0x1246 <__fp_cmp+0x38>
    1238:	0a 26       	eor	r0, r26
    123a:	61 f0       	breq	.+24     	; 0x1254 <__fp_cmp+0x46>
    123c:	23 2b       	or	r18, r19
    123e:	24 2b       	or	r18, r20
    1240:	25 2b       	or	r18, r21
    1242:	21 f4       	brne	.+8      	; 0x124c <__fp_cmp+0x3e>
    1244:	08 95       	ret
    1246:	0a 26       	eor	r0, r26
    1248:	09 f4       	brne	.+2      	; 0x124c <__fp_cmp+0x3e>
    124a:	a1 40       	sbci	r26, 0x01	; 1
    124c:	a6 95       	lsr	r26
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	81 1d       	adc	r24, r1
    1252:	81 1d       	adc	r24, r1
    1254:	08 95       	ret

00001256 <__fp_split3>:
    1256:	57 fd       	sbrc	r21, 7
    1258:	90 58       	subi	r25, 0x80	; 128
    125a:	44 0f       	add	r20, r20
    125c:	55 1f       	adc	r21, r21
    125e:	59 f0       	breq	.+22     	; 0x1276 <__fp_splitA+0x10>
    1260:	5f 3f       	cpi	r21, 0xFF	; 255
    1262:	71 f0       	breq	.+28     	; 0x1280 <__fp_splitA+0x1a>
    1264:	47 95       	ror	r20

00001266 <__fp_splitA>:
    1266:	88 0f       	add	r24, r24
    1268:	97 fb       	bst	r25, 7
    126a:	99 1f       	adc	r25, r25
    126c:	61 f0       	breq	.+24     	; 0x1286 <__fp_splitA+0x20>
    126e:	9f 3f       	cpi	r25, 0xFF	; 255
    1270:	79 f0       	breq	.+30     	; 0x1290 <__fp_splitA+0x2a>
    1272:	87 95       	ror	r24
    1274:	08 95       	ret
    1276:	12 16       	cp	r1, r18
    1278:	13 06       	cpc	r1, r19
    127a:	14 06       	cpc	r1, r20
    127c:	55 1f       	adc	r21, r21
    127e:	f2 cf       	rjmp	.-28     	; 0x1264 <__fp_split3+0xe>
    1280:	46 95       	lsr	r20
    1282:	f1 df       	rcall	.-30     	; 0x1266 <__fp_splitA>
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <__fp_splitA+0x30>
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	99 1f       	adc	r25, r25
    128e:	f1 cf       	rjmp	.-30     	; 0x1272 <__fp_splitA+0xc>
    1290:	86 95       	lsr	r24
    1292:	71 05       	cpc	r23, r1
    1294:	61 05       	cpc	r22, r1
    1296:	08 94       	sec
    1298:	08 95       	ret

0000129a <__fp_zero>:
    129a:	e8 94       	clt

0000129c <__fp_szero>:
    129c:	bb 27       	eor	r27, r27
    129e:	66 27       	eor	r22, r22
    12a0:	77 27       	eor	r23, r23
    12a2:	cb 01       	movw	r24, r22
    12a4:	97 f9       	bld	r25, 7
    12a6:	08 95       	ret

000012a8 <__gesf2>:
    12a8:	b2 df       	rcall	.-156    	; 0x120e <__fp_cmp>
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <__gesf2+0x6>
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	08 95       	ret

000012b0 <__mulsf3>:
    12b0:	0b d0       	rcall	.+22     	; 0x12c8 <__mulsf3x>
    12b2:	78 c0       	rjmp	.+240    	; 0x13a4 <__fp_round>
    12b4:	69 d0       	rcall	.+210    	; 0x1388 <__fp_pscA>
    12b6:	28 f0       	brcs	.+10     	; 0x12c2 <__mulsf3+0x12>
    12b8:	6e d0       	rcall	.+220    	; 0x1396 <__fp_pscB>
    12ba:	18 f0       	brcs	.+6      	; 0x12c2 <__mulsf3+0x12>
    12bc:	95 23       	and	r25, r21
    12be:	09 f0       	breq	.+2      	; 0x12c2 <__mulsf3+0x12>
    12c0:	5a c0       	rjmp	.+180    	; 0x1376 <__fp_inf>
    12c2:	5f c0       	rjmp	.+190    	; 0x1382 <__fp_nan>
    12c4:	11 24       	eor	r1, r1
    12c6:	ea cf       	rjmp	.-44     	; 0x129c <__fp_szero>

000012c8 <__mulsf3x>:
    12c8:	c6 df       	rcall	.-116    	; 0x1256 <__fp_split3>
    12ca:	a0 f3       	brcs	.-24     	; 0x12b4 <__mulsf3+0x4>

000012cc <__mulsf3_pse>:
    12cc:	95 9f       	mul	r25, r21
    12ce:	d1 f3       	breq	.-12     	; 0x12c4 <__mulsf3+0x14>
    12d0:	95 0f       	add	r25, r21
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	55 1f       	adc	r21, r21
    12d6:	62 9f       	mul	r22, r18
    12d8:	f0 01       	movw	r30, r0
    12da:	72 9f       	mul	r23, r18
    12dc:	bb 27       	eor	r27, r27
    12de:	f0 0d       	add	r31, r0
    12e0:	b1 1d       	adc	r27, r1
    12e2:	63 9f       	mul	r22, r19
    12e4:	aa 27       	eor	r26, r26
    12e6:	f0 0d       	add	r31, r0
    12e8:	b1 1d       	adc	r27, r1
    12ea:	aa 1f       	adc	r26, r26
    12ec:	64 9f       	mul	r22, r20
    12ee:	66 27       	eor	r22, r22
    12f0:	b0 0d       	add	r27, r0
    12f2:	a1 1d       	adc	r26, r1
    12f4:	66 1f       	adc	r22, r22
    12f6:	82 9f       	mul	r24, r18
    12f8:	22 27       	eor	r18, r18
    12fa:	b0 0d       	add	r27, r0
    12fc:	a1 1d       	adc	r26, r1
    12fe:	62 1f       	adc	r22, r18
    1300:	73 9f       	mul	r23, r19
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	62 1f       	adc	r22, r18
    1308:	83 9f       	mul	r24, r19
    130a:	a0 0d       	add	r26, r0
    130c:	61 1d       	adc	r22, r1
    130e:	22 1f       	adc	r18, r18
    1310:	74 9f       	mul	r23, r20
    1312:	33 27       	eor	r19, r19
    1314:	a0 0d       	add	r26, r0
    1316:	61 1d       	adc	r22, r1
    1318:	23 1f       	adc	r18, r19
    131a:	84 9f       	mul	r24, r20
    131c:	60 0d       	add	r22, r0
    131e:	21 1d       	adc	r18, r1
    1320:	82 2f       	mov	r24, r18
    1322:	76 2f       	mov	r23, r22
    1324:	6a 2f       	mov	r22, r26
    1326:	11 24       	eor	r1, r1
    1328:	9f 57       	subi	r25, 0x7F	; 127
    132a:	50 40       	sbci	r21, 0x00	; 0
    132c:	8a f0       	brmi	.+34     	; 0x1350 <__mulsf3_pse+0x84>
    132e:	e1 f0       	breq	.+56     	; 0x1368 <__mulsf3_pse+0x9c>
    1330:	88 23       	and	r24, r24
    1332:	4a f0       	brmi	.+18     	; 0x1346 <__mulsf3_pse+0x7a>
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	bb 1f       	adc	r27, r27
    133a:	66 1f       	adc	r22, r22
    133c:	77 1f       	adc	r23, r23
    133e:	88 1f       	adc	r24, r24
    1340:	91 50       	subi	r25, 0x01	; 1
    1342:	50 40       	sbci	r21, 0x00	; 0
    1344:	a9 f7       	brne	.-22     	; 0x1330 <__mulsf3_pse+0x64>
    1346:	9e 3f       	cpi	r25, 0xFE	; 254
    1348:	51 05       	cpc	r21, r1
    134a:	70 f0       	brcs	.+28     	; 0x1368 <__mulsf3_pse+0x9c>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <__fp_inf>
    134e:	a6 cf       	rjmp	.-180    	; 0x129c <__fp_szero>
    1350:	5f 3f       	cpi	r21, 0xFF	; 255
    1352:	ec f3       	brlt	.-6      	; 0x134e <__mulsf3_pse+0x82>
    1354:	98 3e       	cpi	r25, 0xE8	; 232
    1356:	dc f3       	brlt	.-10     	; 0x134e <__mulsf3_pse+0x82>
    1358:	86 95       	lsr	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	b7 95       	ror	r27
    1360:	f7 95       	ror	r31
    1362:	e7 95       	ror	r30
    1364:	9f 5f       	subi	r25, 0xFF	; 255
    1366:	c1 f7       	brne	.-16     	; 0x1358 <__mulsf3_pse+0x8c>
    1368:	fe 2b       	or	r31, r30
    136a:	88 0f       	add	r24, r24
    136c:	91 1d       	adc	r25, r1
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
    1372:	97 f9       	bld	r25, 7
    1374:	08 95       	ret

00001376 <__fp_inf>:
    1376:	97 f9       	bld	r25, 7
    1378:	9f 67       	ori	r25, 0x7F	; 127
    137a:	80 e8       	ldi	r24, 0x80	; 128
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	08 95       	ret

00001382 <__fp_nan>:
    1382:	9f ef       	ldi	r25, 0xFF	; 255
    1384:	80 ec       	ldi	r24, 0xC0	; 192
    1386:	08 95       	ret

00001388 <__fp_pscA>:
    1388:	00 24       	eor	r0, r0
    138a:	0a 94       	dec	r0
    138c:	16 16       	cp	r1, r22
    138e:	17 06       	cpc	r1, r23
    1390:	18 06       	cpc	r1, r24
    1392:	09 06       	cpc	r0, r25
    1394:	08 95       	ret

00001396 <__fp_pscB>:
    1396:	00 24       	eor	r0, r0
    1398:	0a 94       	dec	r0
    139a:	12 16       	cp	r1, r18
    139c:	13 06       	cpc	r1, r19
    139e:	14 06       	cpc	r1, r20
    13a0:	05 06       	cpc	r0, r21
    13a2:	08 95       	ret

000013a4 <__fp_round>:
    13a4:	09 2e       	mov	r0, r25
    13a6:	03 94       	inc	r0
    13a8:	00 0c       	add	r0, r0
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <__fp_round+0xc>
    13ac:	88 23       	and	r24, r24
    13ae:	52 f0       	brmi	.+20     	; 0x13c4 <__fp_round+0x20>
    13b0:	bb 0f       	add	r27, r27
    13b2:	40 f4       	brcc	.+16     	; 0x13c4 <__fp_round+0x20>
    13b4:	bf 2b       	or	r27, r31
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__fp_round+0x18>
    13b8:	60 ff       	sbrs	r22, 0
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <__fp_round+0x20>
    13bc:	6f 5f       	subi	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	08 95       	ret

000013c6 <memset>:
    13c6:	dc 01       	movw	r26, r24
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <memset+0x6>
    13ca:	6d 93       	st	X+, r22
    13cc:	41 50       	subi	r20, 0x01	; 1
    13ce:	50 40       	sbci	r21, 0x00	; 0
    13d0:	e0 f7       	brcc	.-8      	; 0x13ca <memset+0x4>
    13d2:	08 95       	ret

000013d4 <sprintf>:
    13d4:	ae e0       	ldi	r26, 0x0E	; 14
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ef ee       	ldi	r30, 0xEF	; 239
    13da:	f9 e0       	ldi	r31, 0x09	; 9
    13dc:	91 c2       	rjmp	.+1314   	; 0x1900 <__prologue_saves__+0x1c>
    13de:	0d 89       	ldd	r16, Y+21	; 0x15
    13e0:	1e 89       	ldd	r17, Y+22	; 0x16
    13e2:	86 e0       	ldi	r24, 0x06	; 6
    13e4:	8c 83       	std	Y+4, r24	; 0x04
    13e6:	1a 83       	std	Y+2, r17	; 0x02
    13e8:	09 83       	std	Y+1, r16	; 0x01
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f e7       	ldi	r25, 0x7F	; 127
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	8d 83       	std	Y+5, r24	; 0x05
    13f2:	ae 01       	movw	r20, r28
    13f4:	47 5e       	subi	r20, 0xE7	; 231
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	6f 89       	ldd	r22, Y+23	; 0x17
    13fa:	78 8d       	ldd	r23, Y+24	; 0x18
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	08 d0       	rcall	.+16     	; 0x1412 <vfprintf>
    1402:	ef 81       	ldd	r30, Y+7	; 0x07
    1404:	f8 85       	ldd	r31, Y+8	; 0x08
    1406:	e0 0f       	add	r30, r16
    1408:	f1 1f       	adc	r31, r17
    140a:	10 82       	st	Z, r1
    140c:	2e 96       	adiw	r28, 0x0e	; 14
    140e:	e4 e0       	ldi	r30, 0x04	; 4
    1410:	93 c2       	rjmp	.+1318   	; 0x1938 <__epilogue_restores__+0x1c>

00001412 <vfprintf>:
    1412:	ac e0       	ldi	r26, 0x0C	; 12
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ee e0       	ldi	r30, 0x0E	; 14
    1418:	fa e0       	ldi	r31, 0x0A	; 10
    141a:	64 c2       	rjmp	.+1224   	; 0x18e4 <__prologue_saves__>
    141c:	7c 01       	movw	r14, r24
    141e:	6b 01       	movw	r12, r22
    1420:	8a 01       	movw	r16, r20
    1422:	fc 01       	movw	r30, r24
    1424:	17 82       	std	Z+7, r1	; 0x07
    1426:	16 82       	std	Z+6, r1	; 0x06
    1428:	83 81       	ldd	r24, Z+3	; 0x03
    142a:	81 ff       	sbrs	r24, 1
    142c:	b0 c1       	rjmp	.+864    	; 0x178e <vfprintf+0x37c>
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	4c 01       	movw	r8, r24
    1434:	f7 01       	movw	r30, r14
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	f6 01       	movw	r30, r12
    143a:	93 fd       	sbrc	r25, 3
    143c:	85 91       	lpm	r24, Z+
    143e:	93 ff       	sbrs	r25, 3
    1440:	81 91       	ld	r24, Z+
    1442:	6f 01       	movw	r12, r30
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <vfprintf+0x38>
    1448:	9e c1       	rjmp	.+828    	; 0x1786 <vfprintf+0x374>
    144a:	85 32       	cpi	r24, 0x25	; 37
    144c:	39 f4       	brne	.+14     	; 0x145c <vfprintf+0x4a>
    144e:	93 fd       	sbrc	r25, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	93 ff       	sbrs	r25, 3
    1454:	81 91       	ld	r24, Z+
    1456:	6f 01       	movw	r12, r30
    1458:	85 32       	cpi	r24, 0x25	; 37
    145a:	21 f4       	brne	.+8      	; 0x1464 <vfprintf+0x52>
    145c:	b7 01       	movw	r22, r14
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	b1 d1       	rcall	.+866    	; 0x17c4 <fputc>
    1462:	e8 cf       	rjmp	.-48     	; 0x1434 <vfprintf+0x22>
    1464:	51 2c       	mov	r5, r1
    1466:	31 2c       	mov	r3, r1
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	20 32       	cpi	r18, 0x20	; 32
    146c:	a0 f4       	brcc	.+40     	; 0x1496 <vfprintf+0x84>
    146e:	8b 32       	cpi	r24, 0x2B	; 43
    1470:	69 f0       	breq	.+26     	; 0x148c <vfprintf+0x7a>
    1472:	30 f4       	brcc	.+12     	; 0x1480 <vfprintf+0x6e>
    1474:	80 32       	cpi	r24, 0x20	; 32
    1476:	59 f0       	breq	.+22     	; 0x148e <vfprintf+0x7c>
    1478:	83 32       	cpi	r24, 0x23	; 35
    147a:	69 f4       	brne	.+26     	; 0x1496 <vfprintf+0x84>
    147c:	20 61       	ori	r18, 0x10	; 16
    147e:	2c c0       	rjmp	.+88     	; 0x14d8 <vfprintf+0xc6>
    1480:	8d 32       	cpi	r24, 0x2D	; 45
    1482:	39 f0       	breq	.+14     	; 0x1492 <vfprintf+0x80>
    1484:	80 33       	cpi	r24, 0x30	; 48
    1486:	39 f4       	brne	.+14     	; 0x1496 <vfprintf+0x84>
    1488:	21 60       	ori	r18, 0x01	; 1
    148a:	26 c0       	rjmp	.+76     	; 0x14d8 <vfprintf+0xc6>
    148c:	22 60       	ori	r18, 0x02	; 2
    148e:	24 60       	ori	r18, 0x04	; 4
    1490:	23 c0       	rjmp	.+70     	; 0x14d8 <vfprintf+0xc6>
    1492:	28 60       	ori	r18, 0x08	; 8
    1494:	21 c0       	rjmp	.+66     	; 0x14d8 <vfprintf+0xc6>
    1496:	27 fd       	sbrc	r18, 7
    1498:	27 c0       	rjmp	.+78     	; 0x14e8 <vfprintf+0xd6>
    149a:	30 ed       	ldi	r19, 0xD0	; 208
    149c:	38 0f       	add	r19, r24
    149e:	3a 30       	cpi	r19, 0x0A	; 10
    14a0:	78 f4       	brcc	.+30     	; 0x14c0 <vfprintf+0xae>
    14a2:	26 ff       	sbrs	r18, 6
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0xa0>
    14a6:	fa e0       	ldi	r31, 0x0A	; 10
    14a8:	5f 9e       	mul	r5, r31
    14aa:	30 0d       	add	r19, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	53 2e       	mov	r5, r19
    14b0:	13 c0       	rjmp	.+38     	; 0x14d8 <vfprintf+0xc6>
    14b2:	8a e0       	ldi	r24, 0x0A	; 10
    14b4:	38 9e       	mul	r3, r24
    14b6:	30 0d       	add	r19, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	33 2e       	mov	r3, r19
    14bc:	20 62       	ori	r18, 0x20	; 32
    14be:	0c c0       	rjmp	.+24     	; 0x14d8 <vfprintf+0xc6>
    14c0:	8e 32       	cpi	r24, 0x2E	; 46
    14c2:	21 f4       	brne	.+8      	; 0x14cc <vfprintf+0xba>
    14c4:	26 fd       	sbrc	r18, 6
    14c6:	5f c1       	rjmp	.+702    	; 0x1786 <vfprintf+0x374>
    14c8:	20 64       	ori	r18, 0x40	; 64
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <vfprintf+0xc6>
    14cc:	8c 36       	cpi	r24, 0x6C	; 108
    14ce:	11 f4       	brne	.+4      	; 0x14d4 <vfprintf+0xc2>
    14d0:	20 68       	ori	r18, 0x80	; 128
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <vfprintf+0xc6>
    14d4:	88 36       	cpi	r24, 0x68	; 104
    14d6:	41 f4       	brne	.+16     	; 0x14e8 <vfprintf+0xd6>
    14d8:	f6 01       	movw	r30, r12
    14da:	93 fd       	sbrc	r25, 3
    14dc:	85 91       	lpm	r24, Z+
    14de:	93 ff       	sbrs	r25, 3
    14e0:	81 91       	ld	r24, Z+
    14e2:	6f 01       	movw	r12, r30
    14e4:	81 11       	cpse	r24, r1
    14e6:	c1 cf       	rjmp	.-126    	; 0x146a <vfprintf+0x58>
    14e8:	98 2f       	mov	r25, r24
    14ea:	9f 7d       	andi	r25, 0xDF	; 223
    14ec:	95 54       	subi	r25, 0x45	; 69
    14ee:	93 30       	cpi	r25, 0x03	; 3
    14f0:	28 f4       	brcc	.+10     	; 0x14fc <vfprintf+0xea>
    14f2:	0c 5f       	subi	r16, 0xFC	; 252
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	ff e3       	ldi	r31, 0x3F	; 63
    14f8:	f9 83       	std	Y+1, r31	; 0x01
    14fa:	0d c0       	rjmp	.+26     	; 0x1516 <vfprintf+0x104>
    14fc:	83 36       	cpi	r24, 0x63	; 99
    14fe:	31 f0       	breq	.+12     	; 0x150c <vfprintf+0xfa>
    1500:	83 37       	cpi	r24, 0x73	; 115
    1502:	71 f0       	breq	.+28     	; 0x1520 <vfprintf+0x10e>
    1504:	83 35       	cpi	r24, 0x53	; 83
    1506:	09 f0       	breq	.+2      	; 0x150a <vfprintf+0xf8>
    1508:	57 c0       	rjmp	.+174    	; 0x15b8 <vfprintf+0x1a6>
    150a:	21 c0       	rjmp	.+66     	; 0x154e <vfprintf+0x13c>
    150c:	f8 01       	movw	r30, r16
    150e:	80 81       	ld	r24, Z
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	0e 5f       	subi	r16, 0xFE	; 254
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	44 24       	eor	r4, r4
    1518:	43 94       	inc	r4
    151a:	51 2c       	mov	r5, r1
    151c:	54 01       	movw	r10, r8
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <vfprintf+0x136>
    1520:	38 01       	movw	r6, r16
    1522:	f2 e0       	ldi	r31, 0x02	; 2
    1524:	6f 0e       	add	r6, r31
    1526:	71 1c       	adc	r7, r1
    1528:	f8 01       	movw	r30, r16
    152a:	a0 80       	ld	r10, Z
    152c:	b1 80       	ldd	r11, Z+1	; 0x01
    152e:	26 ff       	sbrs	r18, 6
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <vfprintf+0x126>
    1532:	65 2d       	mov	r22, r5
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x12a>
    1538:	6f ef       	ldi	r22, 0xFF	; 255
    153a:	7f ef       	ldi	r23, 0xFF	; 255
    153c:	c5 01       	movw	r24, r10
    153e:	2c 87       	std	Y+12, r18	; 0x0c
    1540:	36 d1       	rcall	.+620    	; 0x17ae <strnlen>
    1542:	2c 01       	movw	r4, r24
    1544:	83 01       	movw	r16, r6
    1546:	2c 85       	ldd	r18, Y+12	; 0x0c
    1548:	2f 77       	andi	r18, 0x7F	; 127
    154a:	22 2e       	mov	r2, r18
    154c:	16 c0       	rjmp	.+44     	; 0x157a <vfprintf+0x168>
    154e:	38 01       	movw	r6, r16
    1550:	f2 e0       	ldi	r31, 0x02	; 2
    1552:	6f 0e       	add	r6, r31
    1554:	71 1c       	adc	r7, r1
    1556:	f8 01       	movw	r30, r16
    1558:	a0 80       	ld	r10, Z
    155a:	b1 80       	ldd	r11, Z+1	; 0x01
    155c:	26 ff       	sbrs	r18, 6
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <vfprintf+0x154>
    1560:	65 2d       	mov	r22, r5
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <vfprintf+0x158>
    1566:	6f ef       	ldi	r22, 0xFF	; 255
    1568:	7f ef       	ldi	r23, 0xFF	; 255
    156a:	c5 01       	movw	r24, r10
    156c:	2c 87       	std	Y+12, r18	; 0x0c
    156e:	14 d1       	rcall	.+552    	; 0x1798 <strnlen_P>
    1570:	2c 01       	movw	r4, r24
    1572:	2c 85       	ldd	r18, Y+12	; 0x0c
    1574:	20 68       	ori	r18, 0x80	; 128
    1576:	22 2e       	mov	r2, r18
    1578:	83 01       	movw	r16, r6
    157a:	23 fc       	sbrc	r2, 3
    157c:	19 c0       	rjmp	.+50     	; 0x15b0 <vfprintf+0x19e>
    157e:	83 2d       	mov	r24, r3
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	48 16       	cp	r4, r24
    1584:	59 06       	cpc	r5, r25
    1586:	a0 f4       	brcc	.+40     	; 0x15b0 <vfprintf+0x19e>
    1588:	b7 01       	movw	r22, r14
    158a:	80 e2       	ldi	r24, 0x20	; 32
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	1a d1       	rcall	.+564    	; 0x17c4 <fputc>
    1590:	3a 94       	dec	r3
    1592:	f5 cf       	rjmp	.-22     	; 0x157e <vfprintf+0x16c>
    1594:	f5 01       	movw	r30, r10
    1596:	27 fc       	sbrc	r2, 7
    1598:	85 91       	lpm	r24, Z+
    159a:	27 fe       	sbrs	r2, 7
    159c:	81 91       	ld	r24, Z+
    159e:	5f 01       	movw	r10, r30
    15a0:	b7 01       	movw	r22, r14
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0f d1       	rcall	.+542    	; 0x17c4 <fputc>
    15a6:	31 10       	cpse	r3, r1
    15a8:	3a 94       	dec	r3
    15aa:	f1 e0       	ldi	r31, 0x01	; 1
    15ac:	4f 1a       	sub	r4, r31
    15ae:	51 08       	sbc	r5, r1
    15b0:	41 14       	cp	r4, r1
    15b2:	51 04       	cpc	r5, r1
    15b4:	79 f7       	brne	.-34     	; 0x1594 <vfprintf+0x182>
    15b6:	de c0       	rjmp	.+444    	; 0x1774 <vfprintf+0x362>
    15b8:	84 36       	cpi	r24, 0x64	; 100
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <vfprintf+0x1ae>
    15bc:	89 36       	cpi	r24, 0x69	; 105
    15be:	31 f5       	brne	.+76     	; 0x160c <vfprintf+0x1fa>
    15c0:	f8 01       	movw	r30, r16
    15c2:	27 ff       	sbrs	r18, 7
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <vfprintf+0x1c2>
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	0c 5f       	subi	r16, 0xFC	; 252
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <vfprintf+0x1d2>
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	88 27       	eor	r24, r24
    15da:	77 fd       	sbrc	r23, 7
    15dc:	80 95       	com	r24
    15de:	98 2f       	mov	r25, r24
    15e0:	0e 5f       	subi	r16, 0xFE	; 254
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	2f 76       	andi	r18, 0x6F	; 111
    15e6:	b2 2e       	mov	r11, r18
    15e8:	97 ff       	sbrs	r25, 7
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <vfprintf+0x1ec>
    15ec:	90 95       	com	r25
    15ee:	80 95       	com	r24
    15f0:	70 95       	com	r23
    15f2:	61 95       	neg	r22
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	8f 4f       	sbci	r24, 0xFF	; 255
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	20 68       	ori	r18, 0x80	; 128
    15fc:	b2 2e       	mov	r11, r18
    15fe:	2a e0       	ldi	r18, 0x0A	; 10
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	a4 01       	movw	r20, r8
    1604:	11 d1       	rcall	.+546    	; 0x1828 <__ultoa_invert>
    1606:	a8 2e       	mov	r10, r24
    1608:	a8 18       	sub	r10, r8
    160a:	43 c0       	rjmp	.+134    	; 0x1692 <vfprintf+0x280>
    160c:	85 37       	cpi	r24, 0x75	; 117
    160e:	29 f4       	brne	.+10     	; 0x161a <vfprintf+0x208>
    1610:	2f 7e       	andi	r18, 0xEF	; 239
    1612:	b2 2e       	mov	r11, r18
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	25 c0       	rjmp	.+74     	; 0x1664 <vfprintf+0x252>
    161a:	f2 2f       	mov	r31, r18
    161c:	f9 7f       	andi	r31, 0xF9	; 249
    161e:	bf 2e       	mov	r11, r31
    1620:	8f 36       	cpi	r24, 0x6F	; 111
    1622:	c1 f0       	breq	.+48     	; 0x1654 <vfprintf+0x242>
    1624:	18 f4       	brcc	.+6      	; 0x162c <vfprintf+0x21a>
    1626:	88 35       	cpi	r24, 0x58	; 88
    1628:	79 f0       	breq	.+30     	; 0x1648 <vfprintf+0x236>
    162a:	ad c0       	rjmp	.+346    	; 0x1786 <vfprintf+0x374>
    162c:	80 37       	cpi	r24, 0x70	; 112
    162e:	19 f0       	breq	.+6      	; 0x1636 <vfprintf+0x224>
    1630:	88 37       	cpi	r24, 0x78	; 120
    1632:	21 f0       	breq	.+8      	; 0x163c <vfprintf+0x22a>
    1634:	a8 c0       	rjmp	.+336    	; 0x1786 <vfprintf+0x374>
    1636:	2f 2f       	mov	r18, r31
    1638:	20 61       	ori	r18, 0x10	; 16
    163a:	b2 2e       	mov	r11, r18
    163c:	b4 fe       	sbrs	r11, 4
    163e:	0d c0       	rjmp	.+26     	; 0x165a <vfprintf+0x248>
    1640:	8b 2d       	mov	r24, r11
    1642:	84 60       	ori	r24, 0x04	; 4
    1644:	b8 2e       	mov	r11, r24
    1646:	09 c0       	rjmp	.+18     	; 0x165a <vfprintf+0x248>
    1648:	24 ff       	sbrs	r18, 4
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <vfprintf+0x24e>
    164c:	9f 2f       	mov	r25, r31
    164e:	96 60       	ori	r25, 0x06	; 6
    1650:	b9 2e       	mov	r11, r25
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <vfprintf+0x24e>
    1654:	28 e0       	ldi	r18, 0x08	; 8
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <vfprintf+0x252>
    165a:	20 e1       	ldi	r18, 0x10	; 16
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0x252>
    1660:	20 e1       	ldi	r18, 0x10	; 16
    1662:	32 e0       	ldi	r19, 0x02	; 2
    1664:	f8 01       	movw	r30, r16
    1666:	b7 fe       	sbrs	r11, 7
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <vfprintf+0x266>
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	0c 5f       	subi	r16, 0xFC	; 252
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <vfprintf+0x272>
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 5f       	subi	r16, 0xFE	; 254
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	a4 01       	movw	r20, r8
    1686:	d0 d0       	rcall	.+416    	; 0x1828 <__ultoa_invert>
    1688:	a8 2e       	mov	r10, r24
    168a:	a8 18       	sub	r10, r8
    168c:	fb 2d       	mov	r31, r11
    168e:	ff 77       	andi	r31, 0x7F	; 127
    1690:	bf 2e       	mov	r11, r31
    1692:	b6 fe       	sbrs	r11, 6
    1694:	0b c0       	rjmp	.+22     	; 0x16ac <vfprintf+0x29a>
    1696:	2b 2d       	mov	r18, r11
    1698:	2e 7f       	andi	r18, 0xFE	; 254
    169a:	a5 14       	cp	r10, r5
    169c:	50 f4       	brcc	.+20     	; 0x16b2 <vfprintf+0x2a0>
    169e:	b4 fe       	sbrs	r11, 4
    16a0:	0a c0       	rjmp	.+20     	; 0x16b6 <vfprintf+0x2a4>
    16a2:	b2 fc       	sbrc	r11, 2
    16a4:	08 c0       	rjmp	.+16     	; 0x16b6 <vfprintf+0x2a4>
    16a6:	2b 2d       	mov	r18, r11
    16a8:	2e 7e       	andi	r18, 0xEE	; 238
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <vfprintf+0x2a4>
    16ac:	7a 2c       	mov	r7, r10
    16ae:	2b 2d       	mov	r18, r11
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <vfprintf+0x2a6>
    16b2:	7a 2c       	mov	r7, r10
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <vfprintf+0x2a6>
    16b6:	75 2c       	mov	r7, r5
    16b8:	24 ff       	sbrs	r18, 4
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <vfprintf+0x2c4>
    16bc:	fe 01       	movw	r30, r28
    16be:	ea 0d       	add	r30, r10
    16c0:	f1 1d       	adc	r31, r1
    16c2:	80 81       	ld	r24, Z
    16c4:	80 33       	cpi	r24, 0x30	; 48
    16c6:	11 f4       	brne	.+4      	; 0x16cc <vfprintf+0x2ba>
    16c8:	29 7e       	andi	r18, 0xE9	; 233
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <vfprintf+0x2cc>
    16cc:	22 ff       	sbrs	r18, 2
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <vfprintf+0x2ca>
    16d0:	73 94       	inc	r7
    16d2:	73 94       	inc	r7
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <vfprintf+0x2cc>
    16d6:	82 2f       	mov	r24, r18
    16d8:	86 78       	andi	r24, 0x86	; 134
    16da:	09 f0       	breq	.+2      	; 0x16de <vfprintf+0x2cc>
    16dc:	73 94       	inc	r7
    16de:	23 fd       	sbrc	r18, 3
    16e0:	12 c0       	rjmp	.+36     	; 0x1706 <vfprintf+0x2f4>
    16e2:	20 ff       	sbrs	r18, 0
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <vfprintf+0x2e0>
    16e6:	5a 2c       	mov	r5, r10
    16e8:	73 14       	cp	r7, r3
    16ea:	18 f4       	brcc	.+6      	; 0x16f2 <vfprintf+0x2e0>
    16ec:	53 0c       	add	r5, r3
    16ee:	57 18       	sub	r5, r7
    16f0:	73 2c       	mov	r7, r3
    16f2:	73 14       	cp	r7, r3
    16f4:	60 f4       	brcc	.+24     	; 0x170e <vfprintf+0x2fc>
    16f6:	b7 01       	movw	r22, r14
    16f8:	80 e2       	ldi	r24, 0x20	; 32
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	2c 87       	std	Y+12, r18	; 0x0c
    16fe:	62 d0       	rcall	.+196    	; 0x17c4 <fputc>
    1700:	73 94       	inc	r7
    1702:	2c 85       	ldd	r18, Y+12	; 0x0c
    1704:	f6 cf       	rjmp	.-20     	; 0x16f2 <vfprintf+0x2e0>
    1706:	73 14       	cp	r7, r3
    1708:	10 f4       	brcc	.+4      	; 0x170e <vfprintf+0x2fc>
    170a:	37 18       	sub	r3, r7
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <vfprintf+0x2fe>
    170e:	31 2c       	mov	r3, r1
    1710:	24 ff       	sbrs	r18, 4
    1712:	11 c0       	rjmp	.+34     	; 0x1736 <vfprintf+0x324>
    1714:	b7 01       	movw	r22, r14
    1716:	80 e3       	ldi	r24, 0x30	; 48
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	2c 87       	std	Y+12, r18	; 0x0c
    171c:	53 d0       	rcall	.+166    	; 0x17c4 <fputc>
    171e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1720:	22 ff       	sbrs	r18, 2
    1722:	16 c0       	rjmp	.+44     	; 0x1750 <vfprintf+0x33e>
    1724:	21 ff       	sbrs	r18, 1
    1726:	03 c0       	rjmp	.+6      	; 0x172e <vfprintf+0x31c>
    1728:	88 e5       	ldi	r24, 0x58	; 88
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0x320>
    172e:	88 e7       	ldi	r24, 0x78	; 120
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	b7 01       	movw	r22, r14
    1734:	0c c0       	rjmp	.+24     	; 0x174e <vfprintf+0x33c>
    1736:	82 2f       	mov	r24, r18
    1738:	86 78       	andi	r24, 0x86	; 134
    173a:	51 f0       	breq	.+20     	; 0x1750 <vfprintf+0x33e>
    173c:	21 fd       	sbrc	r18, 1
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x332>
    1740:	80 e2       	ldi	r24, 0x20	; 32
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <vfprintf+0x334>
    1744:	8b e2       	ldi	r24, 0x2B	; 43
    1746:	27 fd       	sbrc	r18, 7
    1748:	8d e2       	ldi	r24, 0x2D	; 45
    174a:	b7 01       	movw	r22, r14
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	3a d0       	rcall	.+116    	; 0x17c4 <fputc>
    1750:	a5 14       	cp	r10, r5
    1752:	30 f4       	brcc	.+12     	; 0x1760 <vfprintf+0x34e>
    1754:	b7 01       	movw	r22, r14
    1756:	80 e3       	ldi	r24, 0x30	; 48
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	34 d0       	rcall	.+104    	; 0x17c4 <fputc>
    175c:	5a 94       	dec	r5
    175e:	f8 cf       	rjmp	.-16     	; 0x1750 <vfprintf+0x33e>
    1760:	aa 94       	dec	r10
    1762:	f4 01       	movw	r30, r8
    1764:	ea 0d       	add	r30, r10
    1766:	f1 1d       	adc	r31, r1
    1768:	80 81       	ld	r24, Z
    176a:	b7 01       	movw	r22, r14
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	2a d0       	rcall	.+84     	; 0x17c4 <fputc>
    1770:	a1 10       	cpse	r10, r1
    1772:	f6 cf       	rjmp	.-20     	; 0x1760 <vfprintf+0x34e>
    1774:	33 20       	and	r3, r3
    1776:	09 f4       	brne	.+2      	; 0x177a <vfprintf+0x368>
    1778:	5d ce       	rjmp	.-838    	; 0x1434 <vfprintf+0x22>
    177a:	b7 01       	movw	r22, r14
    177c:	80 e2       	ldi	r24, 0x20	; 32
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	21 d0       	rcall	.+66     	; 0x17c4 <fputc>
    1782:	3a 94       	dec	r3
    1784:	f7 cf       	rjmp	.-18     	; 0x1774 <vfprintf+0x362>
    1786:	f7 01       	movw	r30, r14
    1788:	86 81       	ldd	r24, Z+6	; 0x06
    178a:	97 81       	ldd	r25, Z+7	; 0x07
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <vfprintf+0x380>
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	9f ef       	ldi	r25, 0xFF	; 255
    1792:	2c 96       	adiw	r28, 0x0c	; 12
    1794:	e2 e1       	ldi	r30, 0x12	; 18
    1796:	c2 c0       	rjmp	.+388    	; 0x191c <__epilogue_restores__>

00001798 <strnlen_P>:
    1798:	fc 01       	movw	r30, r24
    179a:	05 90       	lpm	r0, Z+
    179c:	61 50       	subi	r22, 0x01	; 1
    179e:	70 40       	sbci	r23, 0x00	; 0
    17a0:	01 10       	cpse	r0, r1
    17a2:	d8 f7       	brcc	.-10     	; 0x179a <strnlen_P+0x2>
    17a4:	80 95       	com	r24
    17a6:	90 95       	com	r25
    17a8:	8e 0f       	add	r24, r30
    17aa:	9f 1f       	adc	r25, r31
    17ac:	08 95       	ret

000017ae <strnlen>:
    17ae:	fc 01       	movw	r30, r24
    17b0:	61 50       	subi	r22, 0x01	; 1
    17b2:	70 40       	sbci	r23, 0x00	; 0
    17b4:	01 90       	ld	r0, Z+
    17b6:	01 10       	cpse	r0, r1
    17b8:	d8 f7       	brcc	.-10     	; 0x17b0 <strnlen+0x2>
    17ba:	80 95       	com	r24
    17bc:	90 95       	com	r25
    17be:	8e 0f       	add	r24, r30
    17c0:	9f 1f       	adc	r25, r31
    17c2:	08 95       	ret

000017c4 <fputc>:
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	18 2f       	mov	r17, r24
    17ce:	09 2f       	mov	r16, r25
    17d0:	eb 01       	movw	r28, r22
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	81 fd       	sbrc	r24, 1
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <fputc+0x1a>
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	20 c0       	rjmp	.+64     	; 0x181e <fputc+0x5a>
    17de:	82 ff       	sbrs	r24, 2
    17e0:	10 c0       	rjmp	.+32     	; 0x1802 <fputc+0x3e>
    17e2:	4e 81       	ldd	r20, Y+6	; 0x06
    17e4:	5f 81       	ldd	r21, Y+7	; 0x07
    17e6:	2c 81       	ldd	r18, Y+4	; 0x04
    17e8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ea:	42 17       	cp	r20, r18
    17ec:	53 07       	cpc	r21, r19
    17ee:	7c f4       	brge	.+30     	; 0x180e <fputc+0x4a>
    17f0:	e8 81       	ld	r30, Y
    17f2:	f9 81       	ldd	r31, Y+1	; 0x01
    17f4:	9f 01       	movw	r18, r30
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	39 83       	std	Y+1, r19	; 0x01
    17fc:	28 83       	st	Y, r18
    17fe:	10 83       	st	Z, r17
    1800:	06 c0       	rjmp	.+12     	; 0x180e <fputc+0x4a>
    1802:	e8 85       	ldd	r30, Y+8	; 0x08
    1804:	f9 85       	ldd	r31, Y+9	; 0x09
    1806:	81 2f       	mov	r24, r17
    1808:	09 95       	icall
    180a:	89 2b       	or	r24, r25
    180c:	29 f7       	brne	.-54     	; 0x17d8 <fputc+0x14>
    180e:	2e 81       	ldd	r18, Y+6	; 0x06
    1810:	3f 81       	ldd	r19, Y+7	; 0x07
    1812:	2f 5f       	subi	r18, 0xFF	; 255
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	3f 83       	std	Y+7, r19	; 0x07
    1818:	2e 83       	std	Y+6, r18	; 0x06
    181a:	81 2f       	mov	r24, r17
    181c:	90 2f       	mov	r25, r16
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <__ultoa_invert>:
    1828:	fa 01       	movw	r30, r20
    182a:	aa 27       	eor	r26, r26
    182c:	28 30       	cpi	r18, 0x08	; 8
    182e:	51 f1       	breq	.+84     	; 0x1884 <__ultoa_invert+0x5c>
    1830:	20 31       	cpi	r18, 0x10	; 16
    1832:	81 f1       	breq	.+96     	; 0x1894 <__ultoa_invert+0x6c>
    1834:	e8 94       	clt
    1836:	6f 93       	push	r22
    1838:	6e 7f       	andi	r22, 0xFE	; 254
    183a:	6e 5f       	subi	r22, 0xFE	; 254
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	8f 4f       	sbci	r24, 0xFF	; 255
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	af 4f       	sbci	r26, 0xFF	; 255
    1844:	b1 e0       	ldi	r27, 0x01	; 1
    1846:	3e d0       	rcall	.+124    	; 0x18c4 <__ultoa_invert+0x9c>
    1848:	b4 e0       	ldi	r27, 0x04	; 4
    184a:	3c d0       	rcall	.+120    	; 0x18c4 <__ultoa_invert+0x9c>
    184c:	67 0f       	add	r22, r23
    184e:	78 1f       	adc	r23, r24
    1850:	89 1f       	adc	r24, r25
    1852:	9a 1f       	adc	r25, r26
    1854:	a1 1d       	adc	r26, r1
    1856:	68 0f       	add	r22, r24
    1858:	79 1f       	adc	r23, r25
    185a:	8a 1f       	adc	r24, r26
    185c:	91 1d       	adc	r25, r1
    185e:	a1 1d       	adc	r26, r1
    1860:	6a 0f       	add	r22, r26
    1862:	71 1d       	adc	r23, r1
    1864:	81 1d       	adc	r24, r1
    1866:	91 1d       	adc	r25, r1
    1868:	a1 1d       	adc	r26, r1
    186a:	20 d0       	rcall	.+64     	; 0x18ac <__ultoa_invert+0x84>
    186c:	09 f4       	brne	.+2      	; 0x1870 <__ultoa_invert+0x48>
    186e:	68 94       	set
    1870:	3f 91       	pop	r19
    1872:	2a e0       	ldi	r18, 0x0A	; 10
    1874:	26 9f       	mul	r18, r22
    1876:	11 24       	eor	r1, r1
    1878:	30 19       	sub	r19, r0
    187a:	30 5d       	subi	r19, 0xD0	; 208
    187c:	31 93       	st	Z+, r19
    187e:	de f6       	brtc	.-74     	; 0x1836 <__ultoa_invert+0xe>
    1880:	cf 01       	movw	r24, r30
    1882:	08 95       	ret
    1884:	46 2f       	mov	r20, r22
    1886:	47 70       	andi	r20, 0x07	; 7
    1888:	40 5d       	subi	r20, 0xD0	; 208
    188a:	41 93       	st	Z+, r20
    188c:	b3 e0       	ldi	r27, 0x03	; 3
    188e:	0f d0       	rcall	.+30     	; 0x18ae <__ultoa_invert+0x86>
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__ultoa_invert+0x5c>
    1892:	f6 cf       	rjmp	.-20     	; 0x1880 <__ultoa_invert+0x58>
    1894:	46 2f       	mov	r20, r22
    1896:	4f 70       	andi	r20, 0x0F	; 15
    1898:	40 5d       	subi	r20, 0xD0	; 208
    189a:	4a 33       	cpi	r20, 0x3A	; 58
    189c:	18 f0       	brcs	.+6      	; 0x18a4 <__ultoa_invert+0x7c>
    189e:	49 5d       	subi	r20, 0xD9	; 217
    18a0:	31 fd       	sbrc	r19, 1
    18a2:	40 52       	subi	r20, 0x20	; 32
    18a4:	41 93       	st	Z+, r20
    18a6:	02 d0       	rcall	.+4      	; 0x18ac <__ultoa_invert+0x84>
    18a8:	a9 f7       	brne	.-22     	; 0x1894 <__ultoa_invert+0x6c>
    18aa:	ea cf       	rjmp	.-44     	; 0x1880 <__ultoa_invert+0x58>
    18ac:	b4 e0       	ldi	r27, 0x04	; 4
    18ae:	a6 95       	lsr	r26
    18b0:	97 95       	ror	r25
    18b2:	87 95       	ror	r24
    18b4:	77 95       	ror	r23
    18b6:	67 95       	ror	r22
    18b8:	ba 95       	dec	r27
    18ba:	c9 f7       	brne	.-14     	; 0x18ae <__ultoa_invert+0x86>
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 05       	cpc	r22, r1
    18c0:	71 05       	cpc	r23, r1
    18c2:	08 95       	ret
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	0a 2e       	mov	r0, r26
    18ca:	06 94       	lsr	r0
    18cc:	57 95       	ror	r21
    18ce:	47 95       	ror	r20
    18d0:	37 95       	ror	r19
    18d2:	27 95       	ror	r18
    18d4:	ba 95       	dec	r27
    18d6:	c9 f7       	brne	.-14     	; 0x18ca <__ultoa_invert+0xa2>
    18d8:	62 0f       	add	r22, r18
    18da:	73 1f       	adc	r23, r19
    18dc:	84 1f       	adc	r24, r20
    18de:	95 1f       	adc	r25, r21
    18e0:	a0 1d       	adc	r26, r0
    18e2:	08 95       	ret

000018e4 <__prologue_saves__>:
    18e4:	2f 92       	push	r2
    18e6:	3f 92       	push	r3
    18e8:	4f 92       	push	r4
    18ea:	5f 92       	push	r5
    18ec:	6f 92       	push	r6
    18ee:	7f 92       	push	r7
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	ca 1b       	sub	r28, r26
    190e:	db 0b       	sbc	r29, r27
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	09 94       	ijmp

0000191c <__epilogue_restores__>:
    191c:	2a 88       	ldd	r2, Y+18	; 0x12
    191e:	39 88       	ldd	r3, Y+17	; 0x11
    1920:	48 88       	ldd	r4, Y+16	; 0x10
    1922:	5f 84       	ldd	r5, Y+15	; 0x0f
    1924:	6e 84       	ldd	r6, Y+14	; 0x0e
    1926:	7d 84       	ldd	r7, Y+13	; 0x0d
    1928:	8c 84       	ldd	r8, Y+12	; 0x0c
    192a:	9b 84       	ldd	r9, Y+11	; 0x0b
    192c:	aa 84       	ldd	r10, Y+10	; 0x0a
    192e:	b9 84       	ldd	r11, Y+9	; 0x09
    1930:	c8 84       	ldd	r12, Y+8	; 0x08
    1932:	df 80       	ldd	r13, Y+7	; 0x07
    1934:	ee 80       	ldd	r14, Y+6	; 0x06
    1936:	fd 80       	ldd	r15, Y+5	; 0x05
    1938:	0c 81       	ldd	r16, Y+4	; 0x04
    193a:	1b 81       	ldd	r17, Y+3	; 0x03
    193c:	aa 81       	ldd	r26, Y+2	; 0x02
    193e:	b9 81       	ldd	r27, Y+1	; 0x01
    1940:	ce 0f       	add	r28, r30
    1942:	d1 1d       	adc	r29, r1
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	ed 01       	movw	r28, r26
    1950:	08 95       	ret

00001952 <_exit>:
    1952:	f8 94       	cli

00001954 <__stop_program>:
    1954:	ff cf       	rjmp	.-2      	; 0x1954 <__stop_program>
